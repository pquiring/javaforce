/**
 * Created : Mar 26, 2012
 *
 * @author pquiring
 */

import java.io.*;
import java.net.*;
import java.util.*;

import javaforce.*;
import javaforce.awt.*;

public class MainPanel extends javax.swing.JPanel {

  /**
   * Creates new form MainPanel
   */
  public MainPanel(javax.swing.JRootPane root) {
    initComponents();
    configFile = JF.getUserPath() + "/.jfremote.xml";
    loadConfig();
    JFAWT.assignHotKey(root, connect, java.awt.event.KeyEvent.VK_ENTER);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    protocol = new javax.swing.JComboBox<>();
    computer = new javax.swing.JComboBox<>();
    tabs = new javax.swing.JTabbedPane();
    jPanel2 = new javax.swing.JPanel();
    shareHome = new javax.swing.JCheckBox();
    consoleSession = new javax.swing.JCheckBox();
    sdl = new javax.swing.JCheckBox();
    jLabel6 = new javax.swing.JLabel();
    size = new javax.swing.JTextField();
    fullscreen = new javax.swing.JCheckBox();
    jPanel1 = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    vnc_port = new javax.swing.JTextField();
    jLabel7 = new javax.swing.JLabel();
    vnc_encodings = new javax.swing.JComboBox<>();
    connect = new javax.swing.JButton();
    clear = new javax.swing.JButton();
    jLabel5 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    username = new javax.swing.JTextField();
    password = new javax.swing.JPasswordField();

    jLabel1.setText("Computer:");

    jLabel2.setText("Protocol:");

    protocol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RDP", "VNC" }));
    protocol.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        protocolItemStateChanged(evt);
      }
    });

    computer.setEditable(true);
    computer.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        computerItemStateChanged(evt);
      }
    });

    shareHome.setSelected(true);
    shareHome.setText("Share Home Folder");

    consoleSession.setText("Connect to Console Session");

    sdl.setText("SDL");

    jLabel6.setText("Screen size");

    size.setText("1920x1080");

    fullscreen.setText("Fullscreen");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(shareHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(43, 43, 43))
          .addComponent(consoleSession, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(sdl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fullscreen))
              .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(shareHome)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(consoleSession)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(sdl)
          .addComponent(fullscreen))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(29, Short.MAX_VALUE))
    );

    tabs.addTab("RDP", jPanel2);

    jLabel3.setText("Port:");

    vnc_port.setText("0");

    jLabel7.setText("Encodings");

    vnc_encodings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fast", "Lean" }));

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel7)
          .addComponent(jLabel3))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(vnc_port)
          .addComponent(vnc_encodings, 0, 153, Short.MAX_VALUE))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(vnc_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel7)
          .addComponent(vnc_encodings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(79, Short.MAX_VALUE))
    );

    tabs.addTab("VNC", jPanel1);

    connect.setText("Connect");
    connect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        connectActionPerformed(evt);
      }
    });

    clear.setText("Clear");
    clear.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clearActionPerformed(evt);
      }
    });

    jLabel5.setText("Password");

    jLabel4.setText("Username");
    jLabel4.setToolTipText("Not used in VNC");

    username.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        usernameActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(tabs)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(clear)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(connect))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
              .addComponent(jLabel5))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(password)
              .addComponent(computer, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(protocol, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(username, javax.swing.GroupLayout.Alignment.TRAILING))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(computer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(protocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel4))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel5))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(connect)
          .addComponent(clear))
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void protocolItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_protocolItemStateChanged
    tabs.setSelectedIndex(protocol.getSelectedIndex());
  }//GEN-LAST:event_protocolItemStateChanged

  private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
    String host = (String)computer.getSelectedItem();
    if (host.length() == 0) return;
    try {
      InetAddress ip = InetAddress.getByName(host);
    } catch (Exception e) {
      JFAWT.showError("Error", "That host doesn't exist");
      return;
    }
    addHost();
    saveConfig();
    switch (protocol.getSelectedIndex()) {
      case 0: connectRDP(); break;
      case 1: connectVNC(); break;
    }
    System.exit(0);
  }//GEN-LAST:event_connectActionPerformed

  private void computerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_computerItemStateChanged
    if (loading) return;
    int idx = computer.getSelectedIndex();
    if (idx == -1) return;
    Connection connection = config.getConnection(idx);
    vnc_port.setText("" + connection.port);
    vnc_encodings.setSelectedIndex(connection.encoding);
    protocol.setSelectedItem(connection.protocol);
    shareHome.setSelected(connection.shareHome);
    consoleSession.setSelected(connection.consoleSession);
    sdl.setSelected(connection.sdl);
    fullscreen.setSelected(connection.fullscreen);
    username.setText(connection.user);
    password.setText(connection.pass);
    size.setText(connection.size);
  }//GEN-LAST:event_computerItemStateChanged

  private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
    computer.setSelectedItem("");
    protocol.setSelectedIndex(0);
    vnc_port.setText("0");
    vnc_encodings.setSelectedIndex(0);  //fast
    shareHome.setSelected(true);
    consoleSession.setSelected(false);
    sdl.setSelected(false);
    fullscreen.setSelected(false);
    username.setText("");
    password.setText("");
    size.setText("1920x1080");
  }//GEN-LAST:event_clearActionPerformed

  private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_usernameActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton clear;
  private javax.swing.JComboBox<String> computer;
  private javax.swing.JButton connect;
  private javax.swing.JCheckBox consoleSession;
  private javax.swing.JCheckBox fullscreen;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPasswordField password;
  private javax.swing.JComboBox<String> protocol;
  private javax.swing.JCheckBox sdl;
  private javax.swing.JCheckBox shareHome;
  private javax.swing.JTextField size;
  private javax.swing.JTabbedPane tabs;
  private javax.swing.JTextField username;
  private javax.swing.JComboBox<String> vnc_encodings;
  private javax.swing.JTextField vnc_port;
  // End of variables declaration//GEN-END:variables

  public static class Connection {
    public String host, protocol;
    //VNC
    public int port;
    public int encoding;  //0=fast 1=lean
    //RDP
    public boolean shareHome;
    public boolean consoleSession;
    public boolean sdl;
    public boolean fullscreen;
    public String size;
    public String user, pass;
  }

  public static class Config {
    public Connection connection[];
    public Connection getConnection(int idx) {
      return connection[idx];
    }
  }

  private Config config;
  private String configFile;
  private boolean loading = true;

  private boolean exists(String file) {
    return new File("/usr/bin/" + file).exists();
  }

  private void connectRDP() {
    ArrayList<String> cmd = new ArrayList<String>();
    try {
      if (JF.isWindows()) {
        if (sdl.isSelected()) {
          cmd.add("sdl-freerdp");
        } else {
          cmd.add("wfreerdp");
        }
      } else {
        if (sdl.isSelected()) {
          if (exists("sdl-freerdp")) cmd.add("sdl-freerdp");
          else if (exists("sdl-freerdp3")) cmd.add("sdl-freerdp3");
          else throw new Exception("sdl-freerdp not found");
        } else {
          //wayland
          if (exists("wlfreerdp")) cmd.add("wlfreerdp");
          else if (exists("wlfreerdp3")) cmd.add("wlfreerdp3");
          else throw new Exception("wlfreerdp not found");
        }
      }
      if (shareHome.isSelected()) {
        cmd.add("/drive:home=" + JF.getUserPath());
      }
      if (consoleSession.isSelected()) cmd.add("+admin");
      cmd.add("+clipboard");
      cmd.add("+dynamic-resolution");
      cmd.add("/floatbar:sticky:on,default:visible,show:fullscreen");  //not working yet
      if (size.getText().length() > 0) {
        cmd.add("/size:" + size.getText());
      }
      if (fullscreen.isSelected()) {
        cmd.add("+f");
      }
      cmd.add("/u:" + username.getText());
      cmd.add("/p:" + new String(password.getPassword()));
      cmd.add("/v:" + (String)computer.getSelectedItem());
      Runtime.getRuntime().exec(cmd.toArray(new String[0]));
    } catch (Exception e) {
      JFAWT.showError("Error", "Failed to execute rdesktop");
    }
  }

  private void connectVNC() {
    String host = (String)computer.getSelectedItem();
    String p = vnc_port.getText();
    if (p.length() > 0 && !p.equals("0")) host += ":" + p;
    int encodingIndex = vnc_encodings.getSelectedIndex();
    String encodings = "";
    switch (encodingIndex) {
      case 0: encodings = "--fast"; break;
      case 1: encodings = "--lean"; break;
    }
    String user = username.getText();  //not used in VNC
    String pass = new String(password.getPassword());
    if (pass.length() == 0) {
      pass = "\"\"";  //empty string
    }
    try {
      String cmd[] = {"jfvnc", host, pass, encodings};
      Runtime.getRuntime().exec(cmd);
    } catch (Exception e) {
      JFAWT.showError("Error", "Failed to execute jfvnc");
    }
  }

  private void loadConfig() {
    config = new Config();
    config.connection = null;
    try {
      XML xml = new XML();
      FileInputStream fis = new FileInputStream(configFile);
      xml.read(fis);
      xml.writeClass(config);
      for(int a=0;a<config.connection.length;a++) {
        computer.addItem(config.connection[a].host);
      }
      fis.close();
    } catch (Exception e) {
      config = new Config();
      config.connection = new Connection[0];
    }
    computer.setSelectedItem("");
    loading = false;
  }

  private void saveConfig() {
    try {
      XML xml = new XML();
      FileOutputStream fos = new FileOutputStream(configFile);
      xml.readClass("jfremote", config);
      xml.write(fos);
      fos.close();
    } catch (Exception e) {
    }
  }

  private void addHost() {
    String host = (String)computer.getSelectedItem();
    for(int a=0;a<config.connection.length;a++) {
      if (config.connection[a].host.equalsIgnoreCase(host)) {
        //update entry
        Connection connection = config.getConnection(a);
        saveHost(connection);
        return;
      }
    }
    //create new entry
    Connection newList[] = new Connection[config.connection.length + 1];
    System.arraycopy(config.connection, 0, newList, 0, config.connection.length);
    config.connection = newList;
    int idx = config.connection.length - 1;
    config.connection[idx] = new Connection();
    Connection connection = config.getConnection(idx);
    connection.host = host;
    saveHost(connection);
  }

  private void saveHost(Connection connection) {
    connection.protocol = (String)protocol.getSelectedItem();
    connection.user = username.getText();
    connection.pass = new String(password.getPassword());
    //VNC
    connection.port = JF.atoi(vnc_port.getText());
    connection.encoding = vnc_encodings.getSelectedIndex();
    //RDP
    connection.shareHome = shareHome.isSelected();
    connection.consoleSession = consoleSession.isSelected();
    connection.sdl = sdl.isSelected();
    connection.fullscreen = fullscreen.isSelected();
    connection.size = size.getText();
  }
}
