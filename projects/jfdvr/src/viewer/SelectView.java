package viewer;

/** SelectView
 *
 * @author pquiring
 */

import java.util.*;
import java.net.*;
import javax.swing.*;

import javaforce.*;
import javaforce.voip.*;

public class SelectView extends javax.swing.JPanel implements RTSPClientInterface {

  /**
   * Creates new form SelectGroup
   */
  public SelectView() {
    initComponents();
    updateLists();
    initServer();
    if (server.getText().length() > 0) {
      getLists();
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel3 = new javax.swing.JLabel();
    server = new javax.swing.JTextField();
    updateLists = new javax.swing.JButton();
    split = new javax.swing.JSplitPane();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    groupList = new javax.swing.JList<>();
    jLabel1 = new javax.swing.JLabel();
    viewGroup = new javax.swing.JButton();
    jPanel2 = new javax.swing.JPanel();
    jScrollPane2 = new javax.swing.JScrollPane();
    cameraList = new javax.swing.JList<>();
    jLabel2 = new javax.swing.JLabel();
    viewCamera = new javax.swing.JButton();

    setPreferredSize(new java.awt.Dimension(1280, 720));

    jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jLabel3.setText("Server:");

    server.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

    updateLists.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    updateLists.setText("Update Lists");
    updateLists.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        updateListsActionPerformed(evt);
      }
    });

    split.setDividerLocation(640);

    groupList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    groupList.setModel(new DefaultListModel<String>());
    jScrollPane1.setViewportView(groupList);

    jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jLabel1.setText("Groups");

    viewGroup.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    viewGroup.setText("View Group");
    viewGroup.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        viewGroupActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(viewGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(viewGroup)
          .addComponent(jLabel1))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        .addContainerGap())
    );

    split.setLeftComponent(jPanel1);

    cameraList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    cameraList.setModel(new DefaultListModel<String>());
    jScrollPane2.setViewportView(cameraList);

    jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jLabel2.setText("Cameras");

    viewCamera.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    viewCamera.setText("View Camera");
    viewCamera.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        viewCameraActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(viewCamera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(viewCamera))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        .addContainerGap())
    );

    split.setRightComponent(jPanel2);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(split)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(server)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(updateLists)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(split, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(server, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(updateLists))
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void viewGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewGroupActionPerformed
    String group = groupList.getSelectedValue();
    if (group == null) return;
    ViewerApp.self.selectView("group" ,group);
  }//GEN-LAST:event_viewGroupActionPerformed

  private void viewCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCameraActionPerformed
    String camera = cameraList.getSelectedValue();
    if (camera == null) return;
    ViewerApp.self.selectView("camera", camera);
  }//GEN-LAST:event_viewCameraActionPerformed

  private void updateListsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateListsActionPerformed
    getLists();
  }//GEN-LAST:event_updateListsActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JList<String> cameraList;
  private javax.swing.JList<String> groupList;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTextField server;
  private javax.swing.JSplitPane split;
  private javax.swing.JButton updateLists;
  private javax.swing.JButton viewCamera;
  private javax.swing.JButton viewGroup;
  // End of variables declaration//GEN-END:variables

  private RTSPClient rtsp;
  public static ArrayList<String> cameras = new ArrayList<>();
  public static ArrayList<String> groups = new ArrayList<>();

  public void setServer(String svr) {
    server.setText(svr);
    getLists();
  }

  private void updateLists() {
    DefaultListModel<String> groupModel = (DefaultListModel<String>)groupList.getModel();
    groupModel.removeAllElements();
    for(String group : groups) {
      groupModel.addElement(group);
    }

    DefaultListModel<String> cameraModel = (DefaultListModel<String>)cameraList.getModel();
    cameraModel.removeAllElements();
    for(String camera : cameras) {
      cameraModel.addElement(camera);
    }
  }

  private void initServer() {
    if (Config.url == null) return;
    String host = Config.url.getHost();
    int port = Config.url.getPort();
    server.setText(host + (port > 0 ? (":" + port) : ""));
  }

  private void getLists() {
    rtsp = new RTSPClient();
    if (Config.url == null) {
      try {
        Config.url = new URI("rtsp://user:pass@" + server.getText()).toURL();
      } catch (Exception e) {
        return;
      }
    }
    int port = Config.url.getPort();
    if (port == -1) {
      port = 554;  //default RTSP port
    }
    rtsp.init(Config.url.getHost(), port, Config.getLocalPort(), this, TransportType.TCP);
    rtsp.get_parameter(Config.newURL("/list/all").toString(), new String[] {"action: query"});
  }

  public void onOptions(RTSPClient client) {
  }

  public void onDescribe(RTSPClient client, SDP sdp) {
  }

  public void onSetup(RTSPClient client) {
  }

  public void onPlay(RTSPClient client) {
  }

  public void onTeardown(RTSPClient client) {
  }

  public void onGetParameter(RTSPClient client, String[] params) {
    cameras.clear();
    groups.clear();
    String camsstr = HTTP.getParameter(params, "cameras");
    if (camsstr != null) {
      String[] cams = camsstr.split(",");
      for(String cam : cams) {
        cameras.add(cam);
      }
    }
    String grpsstr = HTTP.getParameter(params, "groups");
    if (grpsstr != null) {
      String[] grps = grpsstr.split(",");
      for(String grp : grps) {
        groups.add(grp);
      }
    }
    updateLists();
    rtsp.uninit();
    rtsp = null;
  }
}
