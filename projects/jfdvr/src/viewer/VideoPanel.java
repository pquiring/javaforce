package viewer;

/** Video Panel
 *
 * @author pquiring
 */

import java.awt.*;
import java.io.*;
import java.net.*;
import java.util.*;

import javaforce.*;
import javaforce.voip.*;
import javaforce.awt.*;

public class VideoPanel extends javax.swing.JPanel {

  /**
   * Creates new form VideoPanel
   */
  public VideoPanel(Viewer viewer) {
    initComponents();
    container.setVisible(false);
    this.viewer = viewer;
    timeline_min = new JFImage(min_per_day, 16);
    timeline_sec = new JFImage(60, 16);
    setup();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    container = new javax.swing.JScrollPane();
    controls = new javax.swing.JPanel();
    minutes = new javax.swing.JLabel();
    seconds = new javax.swing.JLabel();
    live = new javax.swing.JButton();
    download = new javax.swing.JButton();
    date = new javax.swing.JSpinner();

    setPreferredSize(new java.awt.Dimension(1280, 720));
    addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        formMouseMoved(evt);
      }
    });
    addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        formMouseClicked(evt);
      }
    });
    addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentResized(java.awt.event.ComponentEvent evt) {
        formComponentResized(evt);
      }
    });

    controls.setPreferredSize(new java.awt.Dimension(1454, 100));
    controls.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        controlsMouseMoved(evt);
      }
    });

    minutes.setBackground(new java.awt.Color(0, 0, 0));
    minutes.setForeground(new java.awt.Color(51, 255, 0));
    minutes.setToolTipText("");
    minutes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    minutes.setPreferredSize(new java.awt.Dimension(1442, 18));
    minutes.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseDragged(java.awt.event.MouseEvent evt) {
        minutesMouseDragged(evt);
      }
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        minutesMouseMoved(evt);
      }
    });
    minutes.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        minutesMouseClicked(evt);
      }
      public void mousePressed(java.awt.event.MouseEvent evt) {
        minutesMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        minutesMouseReleased(evt);
      }
    });

    seconds.setBackground(new java.awt.Color(0, 0, 0));
    seconds.setForeground(new java.awt.Color(51, 255, 0));
    seconds.setToolTipText("");
    seconds.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    seconds.setPreferredSize(new java.awt.Dimension(62, 18));
    seconds.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseDragged(java.awt.event.MouseEvent evt) {
        secondsMouseDragged(evt);
      }
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        secondsMouseMoved(evt);
      }
    });
    seconds.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        secondsMouseClicked(evt);
      }
      public void mousePressed(java.awt.event.MouseEvent evt) {
        secondsMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        secondsMouseReleased(evt);
      }
    });

    live.setText("Live");
    live.setToolTipText("Seek to live video");
    live.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        liveActionPerformed(evt);
      }
    });

    download.setText("Download");
    download.setToolTipText("Select range then download");
    download.setEnabled(false);
    download.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        downloadActionPerformed(evt);
      }
    });

    date.setModel(new javax.swing.SpinnerDateModel());
    date.setEditor(new javax.swing.JSpinner.DateEditor(date, "yyyy-dd-MM"));

    javax.swing.GroupLayout controlsLayout = new javax.swing.GroupLayout(controls);
    controls.setLayout(controlsLayout);
    controlsLayout.setHorizontalGroup(
      controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(controlsLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(minutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(controlsLayout.createSequentialGroup()
            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(live)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(download)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(seconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    controlsLayout.setVerticalGroup(
      controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(controlsLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(minutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(live)
            .addComponent(download)
            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(seconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(47, Short.MAX_VALUE))
    );

    container.setViewportView(controls);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(container, javax.swing.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addGap(0, 650, Short.MAX_VALUE)
        .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
    wake();
  }//GEN-LAST:event_formMouseMoved

  private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
    ViewerApp.viewer.setVideoSize(getWidth(), getHeight());
  }//GEN-LAST:event_formComponentResized

  private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    zoom(evt.getX(), evt.getY());
  }//GEN-LAST:event_formMouseClicked

  private void liveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_liveActionPerformed
    seek_live();
  }//GEN-LAST:event_liveActionPerformed

  private void secondsMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondsMouseMoved
    // TODO add your handling code here:
  }//GEN-LAST:event_secondsMouseMoved

  private void secondsMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondsMouseDragged
    // TODO add your handling code here:
  }//GEN-LAST:event_secondsMouseDragged

  private void minutesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minutesMouseClicked
    seek_mins(evt.getX());
  }//GEN-LAST:event_minutesMouseClicked

  private void minutesMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minutesMouseMoved
    timeline_mouse_move(evt.getX(), evt.getY());
  }//GEN-LAST:event_minutesMouseMoved

  private void minutesMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minutesMouseDragged
    timeline_mouse_move(evt.getX(), evt.getY());
  }//GEN-LAST:event_minutesMouseDragged

  private void secondsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondsMouseClicked
    seek_secs(evt.getX());
  }//GEN-LAST:event_secondsMouseClicked

  private void minutesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minutesMousePressed
    sel_mins_start(evt.getX());
  }//GEN-LAST:event_minutesMousePressed

  private void minutesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minutesMouseReleased
    sel_mins_stop(evt.getX());
  }//GEN-LAST:event_minutesMouseReleased

  private void secondsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondsMousePressed
    sel_secs_start(evt.getX());
  }//GEN-LAST:event_secondsMousePressed

  private void secondsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondsMouseReleased
    sel_secs_stop(evt.getX());
  }//GEN-LAST:event_secondsMouseReleased

  private void downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActionPerformed
    download();
  }//GEN-LAST:event_downloadActionPerformed

  private void controlsMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_controlsMouseMoved
    wake();
  }//GEN-LAST:event_controlsMouseMoved

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane container;
  private javax.swing.JPanel controls;
  private javax.swing.JSpinner date;
  private javax.swing.JButton download;
  private javax.swing.JButton live;
  private javax.swing.JLabel minutes;
  private javax.swing.JLabel seconds;
  // End of variables declaration//GEN-END:variables

  private Viewer viewer;
  private String url;
  private JFImage video;
  private JFImage timeline_min;
  private JFImage timeline_sec;
  private boolean needPainting = false;
  private boolean grid;
  private int gx, gy;
  private boolean zoom;
  private int zx, zy;
  private long lastUpdate;
  private long ts_delta;  //0=live
  //selection on minutes timeline
  private long ts_sel_min_start = -1;
  private long ts_sel_min_stop = -1;
  //selection on seconds timeline
  private long ts_sel_sec_start = -1;
  private long ts_sel_sec_stop = -1;
  //selection start
  private int sel_mins_start = -1;
  private int sel_secs_start = -1;
  private boolean showControls = true;
  private java.util.Timer timer;
  private int cnt = 0;

  public static boolean debug = false;

  private synchronized void init() {
    if (video != null) return;
    int x = getWidth();
    int y = getHeight();
    if (x > 0 && y > 0) {
      video = new JFImage(x, y);
    }
  }

  private void wake() {
    if (showControls) return;
    cnt = 0;
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        showControls = true;
        controls.setVisible(true);
        repaint();
      }
    });
  }

  private void setup() {
    timer = new java.util.Timer();
    timer.schedule(new TimerTask() {
      public void run() {
        if (!showControls) return;
        cnt++;
        if (cnt == 5) {
          java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              showControls = false;
              controls.setVisible(false);
              repaint();
            }
          });
        }
      }
    }, 1000, 1000);
  }

  private void unsetup() {
    if (timer != null) {
      timer.cancel();
      timer = null;
    }
  }

  /** Removes timestamps from URL */
  public static String cleanURL(String url) {
    //rtsp://user:pass@server/camera/name/[ts_start/[ts_end]]
    int i1 = url.indexOf('/', 7);
    int i2 = url.indexOf('/', i1+1);
    if (i2 == -1) return url;
    int i3 = url.indexOf('/', i2+1);
    if (i3 == -1) return url;
    return url.substring(0, i3);  //strip timestamps
  }

  public void setURL(String url) {
    this.url = cleanURL(url);
  }

  public void start() {
    init();
  }

  public void resize() {
    video = new JFImage(getWidth(), getHeight());
  }

  public void stop() {
    if (ViewerApp.self.isFullScreen()) {
      ViewerApp.self.toggleFullScreen();
    }
    unsetup();
  }

  public void setImage(JFImage src) {
    init();
    if (video == null) return;
    if (src.getWidth() == getWidth() && src.getHeight() == getHeight()) {
      video.putJFImage(src, 0, 0);
    } else {
      video.putJFImageScale(src, 0, 0, getWidth(), getHeight());
    }
    update();
  }

  public void setImage(JFImage src, int px, int py) {
    init();
    if (video == null) return;
    if (zoom) {
      if (px != zx || py != zy) return;
      setImage(src);
      return;
    }
    int img_w = getWidth();
    int img_h = getHeight();
    int w = img_w / gx;
    int h = img_h / gy;
    int x = w * px;
    int y = h * py;
    setImageRect(src, x, y, w, h);
    update();
  }

  private void setImageRect(JFImage src, int x, int y, int w, int h) {
    init();
    if (video == null) return;
    video.putJFImageScale(src, x, y, w, h);
  }

  private void update() {
    if (needPainting) {
      if (debug) JFLog.log("Video updating too slow");
      return;
    }
    needPainting = true;
    long now = System.currentTimeMillis() / 1000L;
    if (lastUpdate != now) {
      updateTimelines();
      minutes.setIcon(timeline_min);
      seconds.setIcon(timeline_sec);
      lastUpdate = now;
    }
    try {
      java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
          repaint();
        }
      });
    } catch (Exception e) {}
  }

  public void paintComponent(Graphics g) {
    int w = getWidth();
    int h = getHeight();
    //paint controls
    if (video == null) {
      g.fillRect(0, 0, w, h);
    } else {
      int iw = video.getWidth();
      int ih = video.getHeight();
      if (((iw != w) || (ih != h))) {
        if (debug) JFLog.log("VideoPanel:image scaled");
        JFImage scaled = new JFImage();
        scaled.setImageSize(w, h);
        scaled.getGraphics().drawImage(video.getImage(), 0,0, w,h, 0,0, iw,ih, null);
        video = scaled;
      }
      g.drawImage(video.getImage(), 0, 0, null);
    }
    needPainting = false;
  }

  public void setGrid(int gx, int gy) {
    unsetup();
    controls.setVisible(false);
    grid = true;
    this.gx = gx;
    this.gy = gy;
  }

  private void zoom(int x, int y) {
    if (!grid) return;
    if (zoom) {
      zoom = false;
    } else {
      int img_w = getWidth();
      int img_h = getHeight();
      int w = img_w / gx;
      int h = img_h / gy;
      zx = x / w;
      zy = y / h;
      zoom = true;
    }
  }

  private static final int GREEN = 0x00ff00;
  private static final int BLUE = 0x0000ff;

  private void updateTimelines() {
    boolean past_day = getDayDelta() > 0;
    boolean past_min = ts_delta > ms_per_min;
    long now = System.currentTimeMillis();
    long day = toDay(now);
    long min = toMin(now);
    long sec = toSec(now);
    for(int x=0;x<min_per_day;x++) {
      long cmin = x * ms_per_min;
      int clr = 0;
      if (past_day) {
        clr = GREEN;
      } else {
        if (cmin <= min) {
          clr = GREEN;
        }
      }
      if (cmin == min) {
        clr = BLUE;
      }
      timeline_min.line(x, 0, x, 15, clr);
    }
    for(int x=0;x<60;x++) {
      long csec = x * 1000;
      int clr = 0;
      if (past_min) {
        clr = GREEN;
      } else {
        if (csec <= sec) {
          clr = GREEN;
        }
      }
      if (csec == min) {
        clr = BLUE;
      }
      timeline_sec.line(x, 0, x, 15, clr);
    }
  }

  //download preview for tooltip
  private void timeline_mouse_move(int x, int y) {
    //TODO
  }

  private static final long ms_per_day = 24 * 60 * 60 * 1000;  //hr * min * sec * 1000
  private static final long ms_per_min = 60 * 1000;  //sec * 1000
  private static final int min_per_day = 24 * 60;  //hr * min

  private long toDay(long ts) {
    //round ts to 12:00AM
    ts /= ms_per_day;
    ts *= ms_per_day;
    return ts;
  }

  private long toMin(long ts) {
    //get minute within day
    ts = ts % ms_per_day;
    ts /= ms_per_min;
    ts *= ms_per_min;
    return ts;
  }

  private long toSec(long ts) {
    //get second within minute
    ts = ts % ms_per_min;
    ts /= 1000;
    ts *= 1000;
    return ts;
  }

  private long getDayDelta() {
    long now = System.currentTimeMillis();
    long today = toDay(now);
    Date dt = (Date)date.getValue();
    long date_day = toDay(dt.getTime());
    if (date_day > today) return 0;
    return today - date_day;
  }

  private void seek_live() {
    ts_delta = 0;
    try {
      viewer.play(new URI(url).toURL());
    } catch (Exception e) {
      JFLog.log(e);
    }
  }

  private void seek_mins(int mins) {
    clearSelection();
    ts_delta = getDayDelta() + (mins * ms_per_min);
    long now = System.currentTimeMillis();
    long ts = now - ts_delta;
    try {
      viewer.play(new URI(url + "/" + ts).toURL());
    } catch (Exception e) {
      JFLog.log(e);
    }
  }

  private void seek_secs(int secs) {
    clearSelection();
    long mins = ts_delta / ms_per_min;
    ts_delta = getDayDelta() + (mins * ms_per_min) + (secs * 1000);
    long now = System.currentTimeMillis();
    long ts = now - ts_delta;
    try {
      viewer.play(new URI(url + "/" + ts).toURL());
    } catch (Exception e) {
      JFLog.log(e);
    }
  }

  private void clearSelection() {
    sel_mins_start = -1;
    sel_secs_start = -1;
    ts_sel_min_start = -1;
    ts_sel_min_stop = -1;
    ts_sel_sec_start = -1;
    ts_sel_sec_stop = -1;
    download.setEnabled(false);
  }

  private void sel_mins_start(int min) {
    sel_mins_start = min;
  }

  private void sel_mins_stop(int min) {
    if (sel_mins_start == min) {
      clearSelection();
      return;
    }
    if (min < sel_mins_start) {
      //swap start/stop
      int tmp = sel_mins_start;
      sel_mins_start = min;
      min = tmp;
    }
    long now = System.currentTimeMillis();
    ts_sel_min_start = now - (getDayDelta() + (sel_mins_start * ms_per_min));
    ts_sel_min_stop = ts_sel_min_start + (min * ms_per_min);
    ts_sel_sec_start = -1;
    ts_sel_sec_stop = -1;
    download.setEnabled(true);
  }

  private void sel_secs_start(int sec) {
    sel_secs_start = sec;
  }

  private void sel_secs_stop(int sec) {
    if (sel_secs_start == sec) {
      clearSelection();
      return;
    }
    if (sec < sel_secs_start) {
      //swap start/stop
      int tmp = sel_secs_start;
      sel_secs_start = sec;
      sec = tmp;
    }
    long mins = toMin(ts_delta);
    long now = System.currentTimeMillis();
    ts_sel_sec_start = now - (sel_secs_start * 1000);
    ts_sel_sec_stop = ts_sel_sec_start + (sec * 1000);
    ts_sel_min_start = -1;
    ts_sel_min_stop = -1;
    download.setEnabled(true);
  }

  private void download() {
    String filename = JFAWT.getSaveAsFile(System.getProperty("user.dir"), new String[][] {
      {"MKV", "mkv"},
      {"MP4", "mp4"},
      {"AVI", "avi"},
    });
    if (filename == null) return;
    viewer.startDownload(filename);
    if (ts_sel_min_start != -1) {
      //download mins
      try {
        viewer.play(new URI(url + "/" + ts_sel_min_start + "/" + ts_sel_min_stop).toURL());
      } catch (Exception e) {
        JFLog.log(e);
      }
    }
    if (ts_sel_sec_start != -1) {
      //download secs
      try {
        viewer.play(new URI(url + "/" + ts_sel_sec_start + "/" + ts_sel_sec_stop).toURL());
      } catch (Exception e) {
        JFLog.log(e);
      }
    }
  }

  public void setTimestamp(long ts) {
    ts_delta = ts;
    if (ts_delta == 0) {
      seek_live();
    }
  }
}
