/*
 * EditContact.java
 *
 * Created on Jul 8, 2010, 10:43:00 PM
 *
 * @author pquiring
 */

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

import javaforce.awt.*;

public class EditContact extends javax.swing.JDialog {

  /** Creates new form EditContact */
  private EditContact(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    setPosition();
    loadServers();
    JFAWT.assignHotKey(this, cancel, KeyEvent.VK_ESCAPE);
    JFAWT.assignHotKey(this, save, KeyEvent.VK_ENTER);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    name = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    number = new javax.swing.JTextField();
    monitor = new javax.swing.JCheckBox();
    save = new javax.swing.JButton();
    cancel = new javax.swing.JButton();
    jLabel3 = new javax.swing.JLabel();
    server = new javax.swing.JComboBox<>();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Edit Contact");

    jLabel1.setText("Name:");

    name.setText("name");

    jLabel2.setText("Number:");

    number.setText("number");

    monitor.setText("Monitor Availability");

    save.setText("Save");
    save.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveActionPerformed(evt);
      }
    });

    cancel.setText("Cancel");
    cancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelActionPerformed(evt);
      }
    });

    jLabel3.setText("Server:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel2)
              .addComponent(jLabel1)
              .addComponent(jLabel3))
            .addGap(10, 10, 10)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(number, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(name)
              .addComponent(server, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(monitor)
              .addGroup(layout.createSequentialGroup()
                .addComponent(save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancel)))
            .addGap(0, 180, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(server, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(monitor)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(save)
          .addComponent(cancel))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
    if (!valid()) {
      return;
    } else {
      dispose();
    }
  }//GEN-LAST:event_saveActionPerformed

  private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
    cancelled = true;
    dispose();
  }//GEN-LAST:event_cancelActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancel;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JCheckBox monitor;
  private javax.swing.JTextField name;
  private javax.swing.JTextField number;
  private javax.swing.JButton save;
  private javax.swing.JComboBox<String> server;
  // End of variables declaration//GEN-END:variables

  private boolean cancelled = false;
  private String org_name;
  private ArrayList<String> servers = new ArrayList<>();

  /** Pops up the EditContact dialog window and returns when the dialog is closed. */

  public static Settings.Contact editContact(java.awt.Frame parent, Settings.Contact contact) {
    EditContact dialog = new EditContact(parent, true);
    dialog.name.setText(contact.name);
    dialog.number.setText(contact.number);
    dialog.setServer(contact.server);
    dialog.monitor.setSelected(contact.monitor);
    dialog.org_name = contact.name;

    dialog.setVisible(true);  //doesn't return until dialog is closed

    if (dialog.cancelled) return null;

    Settings.Contact new_contact = new Settings.Contact();

    new_contact.name = dialog.name.getText();
    new_contact.number = dialog.number.getText();
    new_contact.server = dialog.getServer();
    new_contact.monitor = dialog.monitor.isSelected();
    return new_contact;
  }

  private void validateName() {
//System.out.println("validateName");
    //make sure name doesn't contain certain chars
    String text = name.getText();
    String newtext = "";
    boolean clean = true;
    char ch;
    for(int a=0;a<text.length();a++) {
      ch = text.charAt(a);
      switch (ch) {
        case '@':
        case '<':
        case '>':
        case '!':
        case ';':
        case ':':
        case '\'':
        case '\"':
          clean = false;
          break;
        default:
          newtext += ch;
          break;
      }
    }
    if (clean) return;
    name.setText(newtext);
  }

  private void validateNumber() {
    //make sure number has only numbers
    String text = number.getText();
    String newtext = "";
    boolean clean = true;
    char ch;
    for(int a=0;a<text.length();a++) {
      ch = text.charAt(a);
      if ((ch >= '0') && (ch <= '9')) {
        newtext += ch;
        continue;
      }
      clean = false;
    }
    if (clean) return;
    number.setText(newtext);
  }

  private void msg(String msg) {
    JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
  }

  private boolean valid() {
    validateName();
    validateNumber();
    if (name.getText().length() == 0) {msg("Invalid name"); return false;}
    if (number.getText().length() == 0) {msg("Invalid number"); return false;}
    if (server.getSelectedIndex() == -1) {msg("Invalid server"); return false;}
    //check if name has changed and already exists
    if (!name.getText().equals(org_name)) {
      for(int a=0;a<Settings.current.contacts.length;a++) {
        Settings.Contact contact = Settings.current.contacts[a];
        if (name.getText().equals(contact.name)) {
          msg("That contact already exists, choose a different name");
          return false;
        }
      }
    }
    return true;
  }
  private void setPosition() {
    Dimension d = getSize();
    Rectangle s = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
    setLocation(s.width/2 - d.width/2, s.height/2 - d.height/2);
  }
  private void loadServers() {
    for(int a=0;a<Settings.current.lines.length;a++) {
      Settings.Line line = Settings.current.lines[a];
      if (a > 0 && line.same != -1) continue;
      String host = Settings.current.lines[a].host;
      servers.add(host);
      String acct = "Account:" + Settings.current.lines[a].name + "@" + host;
      server.addItem(acct);
    }
  }
  private String getServer() {
    int idx = server.getSelectedIndex();
    if (idx == -1) return null;
    return servers.get(idx);
  }
  private void setServer(String value) {
    for(int a=0;a<servers.size();a++) {
      String elem = servers.get(a);
      if (elem.equals(value)) {
        server.setSelectedIndex(a);
        return;
      }
    }
  }
}
