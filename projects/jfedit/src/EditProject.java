/** Edit Project
 *
 * @author pquiring
 */

import javax.swing.*;

import javaforce.awt.*;

public class EditProject extends javax.swing.JDialog {

  /**
   * Creates new form EditProject
   */
  public EditProject(java.awt.Frame parent, boolean modal, Project project) {
    super(parent, modal);
    this.project = project;
    initComponents();
    setTitle("Edit Project");
    setComponentOrientation(((parent == null) ? javax.swing.JOptionPane.getRootFrame() : parent).getComponentOrientation());
    if (parent != null) setLocationRelativeTo(parent);
    files.setModel(new DefaultListModel());
    load();
    JFAWT.assignHotKey(this, bOk, java.awt.event.KeyEvent.VK_ENTER);
    JFAWT.assignHotKey(this, bCancel, java.awt.event.KeyEvent.VK_ESCAPE);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    bOk = new javax.swing.JButton();
    bCancel = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    files = new javax.swing.JList<>();
    add = new javax.swing.JButton();
    remove = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    bOk.setText("Ok");
    bOk.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bOkActionPerformed(evt);
      }
    });

    bCancel.setText("Cancel");
    bCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bCancelActionPerformed(evt);
      }
    });

    jScrollPane1.setViewportView(files);

    add.setText("Add");
    add.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addActionPerformed(evt);
      }
    });

    remove.setText("Remove");
    remove.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        removeActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(add, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(remove, javax.swing.GroupLayout.Alignment.TRAILING)))
          .addGroup(layout.createSequentialGroup()
            .addComponent(bOk)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(bCancel)
            .addGap(0, 137, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(add)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(remove)
            .addGap(0, 0, Short.MAX_VALUE))
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(bOk)
          .addComponent(bCancel))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
    dispose();
  }//GEN-LAST:event_bCancelActionPerformed

  private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
    add();
  }//GEN-LAST:event_addActionPerformed

  private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
    remove();
  }//GEN-LAST:event_removeActionPerformed

  private void bOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOkActionPerformed
    save();
    dispose();
  }//GEN-LAST:event_bOkActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton add;
  private javax.swing.JButton bCancel;
  private javax.swing.JButton bOk;
  private javax.swing.JList<String> files;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton remove;
  // End of variables declaration//GEN-END:variables

  Project project;

  public static void editProject(java.awt.Frame parent, Project project) {
    EditProject dialog = new EditProject(parent, true, project);
    dialog.setVisible(true);
  }

  private void load() {
    DefaultListModel model = (DefaultListModel)files.getModel();
    int count = project.fileMasks.size();
    model.clear();
    for(int idx=0;idx<count;idx++) {
      model.addElement(project.fileMasks.get(idx));
    }
    if (count == 0) {
      model.addElement("*.txt");
    }
  }

  private void save() {
    project.fileMasks.clear();
    DefaultListModel model = (DefaultListModel)files.getModel();
    int count = model.getSize();
    if (count == 0) {
      model.addElement("*.txt");
      count++;
    }
    for(int idx=0;idx<count;idx++) {
      project.fileMasks.add((String)model.getElementAt(idx));
    }
    project.save();
  }

  private void add() {
    String str = JFAWT.getString("Enter filemask", "");
    if (str == null) return;
    DefaultListModel model = (DefaultListModel)files.getModel();
    int count = model.getSize();
    for(int idx=0;idx<count;idx++) {
      String e = (String)model.getElementAt(idx);
      if (e.equals(str)) return;
    }
    model.addElement(str);
  }

  private void remove() {
    DefaultListModel model = (DefaultListModel)files.getModel();
    int idx = files.getSelectedIndex();
    if (idx == -1) return;
    model.removeElementAt(idx);
  }
}
