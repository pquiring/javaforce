/**
 *
 * @author pquiring
 */

import java.awt.*;
import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

import javaforce.*;
import javaforce.awt.*;

public class NetApp extends javax.swing.JFrame implements WifiAnalyzer.Callback {

  public static String version = "0.5";

  /**
   * Creates new form NetApp
   */
  public NetApp() {
    initComponents();
    setTitle("Net Tools/" + version);
    centerWindow(this);
    latency = new int[latencyLabel.getWidth()];
    createMap(25, 25, "ssid");
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    tabs = new javax.swing.JTabbedPane();
    bandwidth = new javax.swing.JPanel();
    jPanel8 = new javax.swing.JPanel();
    jLabel4 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    clientPort = new javax.swing.JTextField();
    clientMode = new javax.swing.JComboBox();
    clientHost = new javax.swing.JTextField();
    jPanel9 = new javax.swing.JPanel();
    clientStatus = new javax.swing.JLabel();
    clientStart = new javax.swing.JButton();
    jLabel5 = new javax.swing.JLabel();
    upSpeed = new javax.swing.JTextField();
    jLabel6 = new javax.swing.JLabel();
    downSpeed = new javax.swing.JTextField();
    jPanel10 = new javax.swing.JPanel();
    latencyLabel = new javax.swing.JLabel() {
      public void paintComponent(Graphics g) {
        paintLatency(g);
      }
    };
    clientStart2 = new javax.swing.JButton();
    clientStatus2 = new javax.swing.JLabel();
    jLabel15 = new javax.swing.JLabel();
    latencyMaxEver = new javax.swing.JTextField();
    jLabel16 = new javax.swing.JLabel();
    latencyMaxWindow = new javax.swing.JTextField();
    jPanel7 = new javax.swing.JPanel();
    serverStatus = new javax.swing.JLabel();
    serverPort = new javax.swing.JTextField();
    serverStart = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    tools = new javax.swing.JPanel();
    jPanel5 = new javax.swing.JPanel();
    jLabel8 = new javax.swing.JLabel();
    pingHost = new javax.swing.JTextField();
    pingStart = new javax.swing.JButton();
    pingStatus = new javax.swing.JLabel();
    jPanel6 = new javax.swing.JPanel();
    jLabel7 = new javax.swing.JLabel();
    dnsHost = new javax.swing.JTextField();
    jLabel9 = new javax.swing.JLabel();
    dnsResolve = new javax.swing.JButton();
    dnsStatus = new javax.swing.JLabel();
    jLabel11 = new javax.swing.JLabel();
    dnsServer = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    dnsIP = new javax.swing.JTextArea();
    dnsType = new javax.swing.JComboBox();
    jLabel12 = new javax.swing.JLabel();
    jPanel3 = new javax.swing.JPanel();
    checkipStart = new javax.swing.JButton();
    jLabel13 = new javax.swing.JLabel();
    jLabel14 = new javax.swing.JLabel();
    internetIP = new javax.swing.JTextField();
    intranetIP = new javax.swing.JTextField();
    ipStatus = new javax.swing.JLabel();
    netmap = new javax.swing.JPanel();
    jPanel1 = new javax.swing.JPanel();
    jLabel17 = new javax.swing.JLabel();
    netmap_host = new javax.swing.JTextField();
    jLabel18 = new javax.swing.JLabel();
    netmap_ports = new javax.swing.JTextField();
    netmap_start = new javax.swing.JButton();
    jScrollPane2 = new javax.swing.JScrollPane();
    netmap_results = new javax.swing.JTextArea();
    jLabel19 = new javax.swing.JLabel();
    jLabel20 = new javax.swing.JLabel();
    netmap_timeout = new javax.swing.JTextField();
    misc = new javax.swing.JPanel();
    jPanel2 = new javax.swing.JPanel();
    jLabel10 = new javax.swing.JLabel();
    fileFile = new javax.swing.JTextField();
    fileSelect = new javax.swing.JButton();
    fileStatus = new javax.swing.JLabel();
    fileStart = new javax.swing.JButton();
    wifi_analyzer = new javax.swing.JPanel();
    jPanel4 = new javax.swing.JPanel();
    wifi_start = new javax.swing.JButton();
    jScrollPane4 = new javax.swing.JScrollPane();
    wifi_table = new javax.swing.JTable();
    wifi_config = new javax.swing.JButton();
    wifi_heatmap = new javax.swing.JPanel();
    jPanel11 = new javax.swing.JPanel();
    heatmap_new = new javax.swing.JButton();
    heatmap_load = new javax.swing.JButton();
    heatmap_save = new javax.swing.JButton();
    heatmap_spot = new javax.swing.JButton();
    heatmap_scroll_pane = new javax.swing.JScrollPane();
    heatmap_image = new javax.swing.JLabel();
    jLabel22 = new javax.swing.JLabel();
    heatmap_export = new javax.swing.JButton();
    jLabel23 = new javax.swing.JLabel();
    heatmap_config = new javax.swing.JButton();
    heatmap_start = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Net Tools");
    setResizable(false);

    jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Client"));

    jLabel4.setText("Mode");

    jLabel3.setText("Port");

    jLabel2.setText("Server");

    clientPort.setText("33000");

    clientMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Full Duplex", "Send Only", "Receive Only" }));

    clientHost.setText("127.0.0.1");

    jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Bandwidth Test"));

    clientStatus.setText("Idle");

    clientStart.setText("Start");
    clientStart.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clientStartActionPerformed(evt);
      }
    });

    jLabel5.setText("Upload Speed");

    upSpeed.setEditable(false);

    jLabel6.setText("Download Speed");

    downSpeed.setEditable(false);

    javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
    jPanel9.setLayout(jPanel9Layout);
    jPanel9Layout.setHorizontalGroup(
      jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel9Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel9Layout.createSequentialGroup()
            .addComponent(clientStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(clientStart))
          .addGroup(jPanel9Layout.createSequentialGroup()
            .addComponent(jLabel5)
            .addGap(31, 31, 31)
            .addComponent(upSpeed))
          .addGroup(jPanel9Layout.createSequentialGroup()
            .addComponent(jLabel6)
            .addGap(18, 18, 18)
            .addComponent(downSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanel9Layout.setVerticalGroup(
      jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel9Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(upSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(downSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(clientStatus)
          .addComponent(clientStart))
        .addContainerGap())
    );

    jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Latency Test"));

    latencyLabel.setBackground(new java.awt.Color(0, 0, 0));
    latencyLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    clientStart2.setText("Start");
    clientStart2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clientStart2ActionPerformed(evt);
      }
    });

    clientStatus2.setText("Idle");

    jLabel15.setText("Max (us)");

    latencyMaxEver.setEditable(false);

    jLabel16.setText("Window Max (us)");

    latencyMaxWindow.setEditable(false);

    javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
    jPanel10.setLayout(jPanel10Layout);
    jPanel10Layout.setHorizontalGroup(
      jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel10Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(latencyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(jPanel10Layout.createSequentialGroup()
            .addComponent(clientStatus2, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(clientStart2))
          .addGroup(jPanel10Layout.createSequentialGroup()
            .addComponent(jLabel15)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(latencyMaxEver)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel16)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(latencyMaxWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    jPanel10Layout.setVerticalGroup(
      jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel10Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(latencyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(clientStatus2)
          .addComponent(clientStart2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel15)
          .addComponent(latencyMaxEver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel16)
          .addComponent(latencyMaxWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
    jPanel8.setLayout(jPanel8Layout);
    jPanel8Layout.setHorizontalGroup(
      jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel8Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel8Layout.createSequentialGroup()
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel2)
              .addComponent(jLabel3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(clientHost)
              .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(clientPort, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientMode, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
          .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    jPanel8Layout.setVerticalGroup(
      jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel8Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(clientHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(clientPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(clientMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel4))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Server"));

    serverStatus.setText("Idle");

    serverPort.setText("33000");

    serverStart.setText("Start");
    serverStart.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        serverStartActionPerformed(evt);
      }
    });

    jLabel1.setText("Port");

    javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
    jPanel7.setLayout(jPanel7Layout);
    jPanel7Layout.setHorizontalGroup(
      jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel7Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel7Layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(jPanel7Layout.createSequentialGroup()
            .addComponent(serverStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(serverStart)))
        .addContainerGap())
    );
    jPanel7Layout.setVerticalGroup(
      jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel7Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(serverStatus)
          .addComponent(serverStart))
        .addContainerGap())
    );

    javax.swing.GroupLayout bandwidthLayout = new javax.swing.GroupLayout(bandwidth);
    bandwidth.setLayout(bandwidthLayout);
    bandwidthLayout.setHorizontalGroup(
      bandwidthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(bandwidthLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(bandwidthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    bandwidthLayout.setVerticalGroup(
      bandwidthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bandwidthLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    tabs.addTab("Bandwidth", bandwidth);

    jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Ping"));

    jLabel8.setText("Host");

    pingHost.setText("example.com");

    pingStart.setText("Start");
    pingStart.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        pingStartActionPerformed(evt);
      }
    });

    pingStatus.setText("Idle");

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel5Layout.createSequentialGroup()
            .addComponent(jLabel8)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pingHost))
          .addGroup(jPanel5Layout.createSequentialGroup()
            .addComponent(pingStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pingStart)))
        .addContainerGap())
    );
    jPanel5Layout.setVerticalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel8)
          .addComponent(pingHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(pingStart)
          .addComponent(pingStatus))
        .addContainerGap())
    );

    jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("DNS"));

    jLabel7.setText("Host:");

    dnsHost.setText("example.com");

    jLabel9.setText("Result:");

    dnsResolve.setText("Resolve");
    dnsResolve.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        dnsResolveActionPerformed(evt);
      }
    });

    dnsStatus.setText("Idle");

    jLabel11.setText("Server:");

    dnsServer.setText("8.8.8.8");

    dnsIP.setEditable(false);
    dnsIP.setColumns(20);
    dnsIP.setRows(5);
    jScrollPane1.setViewportView(dnsIP);

    dnsType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A", "MX", "AAAA" }));

    jLabel12.setText("Type:");

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
      jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel6Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel6Layout.createSequentialGroup()
            .addComponent(jLabel7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(dnsHost)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel12)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(dnsType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel6Layout.createSequentialGroup()
            .addComponent(jLabel11)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(dnsServer))
          .addGroup(jPanel6Layout.createSequentialGroup()
            .addComponent(jLabel9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1))
          .addGroup(jPanel6Layout.createSequentialGroup()
            .addComponent(dnsStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(dnsResolve)))
        .addContainerGap())
    );
    jPanel6Layout.setVerticalGroup(
      jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel6Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel7)
          .addComponent(dnsHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(dnsType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel12))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel11)
          .addComponent(dnsServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel9)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(dnsStatus)
          .addComponent(dnsResolve))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Detect IP"));

    checkipStart.setText("Start");
    checkipStart.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        checkipStartActionPerformed(evt);
      }
    });

    jLabel13.setText("Internet IP:");

    jLabel14.setText("Intranet IP:");

    internetIP.setEditable(false);

    intranetIP.setEditable(false);

    ipStatus.setText("Idle");

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(ipStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(checkipStart))
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(jLabel13)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(internetIP))
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(jLabel14)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(intranetIP)))
        .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel13)
          .addComponent(internetIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel14)
          .addComponent(intranetIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(checkipStart)
          .addComponent(ipStatus))
        .addContainerGap())
    );

    javax.swing.GroupLayout toolsLayout = new javax.swing.GroupLayout(tools);
    tools.setLayout(toolsLayout);
    toolsLayout.setHorizontalGroup(
      toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(toolsLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    toolsLayout.setVerticalGroup(
      toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(toolsLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(108, Short.MAX_VALUE))
    );

    tabs.addTab("Tools", tools);

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("NetMap"));

    jLabel17.setText("Host");

    netmap_host.setText("127.0.0.1");

    jLabel18.setText("Ports");

    netmap_ports.setText("80,443");

    netmap_start.setText("Start");
    netmap_start.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        netmap_startActionPerformed(evt);
      }
    });

    netmap_results.setColumns(20);
    netmap_results.setRows(5);
    jScrollPane2.setViewportView(netmap_results);

    jLabel19.setText("Results:");

    jLabel20.setText("timeout(ms)");

    netmap_timeout.setText("1000");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(jLabel17)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(netmap_host))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(jLabel18)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(netmap_ports))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addGap(6, 6, 6)
            .addComponent(jLabel19)
            .addGap(18, 18, 18)
            .addComponent(jLabel20)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(netmap_timeout, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 307, Short.MAX_VALUE)
            .addComponent(netmap_start)))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel17)
          .addComponent(netmap_host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel18)
          .addComponent(netmap_ports, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(netmap_start)
          .addComponent(jLabel19)
          .addComponent(jLabel20)
          .addComponent(netmap_timeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
        .addContainerGap())
    );

    javax.swing.GroupLayout netmapLayout = new javax.swing.GroupLayout(netmap);
    netmap.setLayout(netmapLayout);
    netmapLayout.setHorizontalGroup(
      netmapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(netmapLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    netmapLayout.setVerticalGroup(
      netmapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(netmapLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );

    tabs.addTab("NetMap", netmap);

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("File Read Benchmark (SSD)"));

    jLabel10.setText("File:");

    fileSelect.setText("Select...");
    fileSelect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fileSelectActionPerformed(evt);
      }
    });

    fileStatus.setText("Idle");

    fileStart.setText("Start");
    fileStart.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fileStartActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jLabel10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(fileFile, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(fileSelect))
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(fileStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(fileStart)))
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel10)
          .addComponent(fileFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(fileSelect))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(fileStatus)
          .addComponent(fileStart))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout miscLayout = new javax.swing.GroupLayout(misc);
    misc.setLayout(miscLayout);
    miscLayout.setHorizontalGroup(
      miscLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(miscLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    miscLayout.setVerticalGroup(
      miscLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(miscLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(425, Short.MAX_VALUE))
    );

    tabs.addTab("Misc", misc);

    jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Wifi Analyzer"));

    wifi_start.setText("Start");
    wifi_start.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        wifi_startActionPerformed(evt);
      }
    });

    wifi_table.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "SSID", "Freq", "Signal", "Type"
      }
    ));
    jScrollPane4.setViewportView(wifi_table);

    wifi_config.setText("Config");
    wifi_config.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        wifi_configActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
            .addComponent(wifi_start)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(wifi_config)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanel4Layout.setVerticalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(wifi_start)
          .addComponent(wifi_config))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
        .addContainerGap())
    );

    javax.swing.GroupLayout wifi_analyzerLayout = new javax.swing.GroupLayout(wifi_analyzer);
    wifi_analyzer.setLayout(wifi_analyzerLayout);
    wifi_analyzerLayout.setHorizontalGroup(
      wifi_analyzerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(wifi_analyzerLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    wifi_analyzerLayout.setVerticalGroup(
      wifi_analyzerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(wifi_analyzerLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );

    tabs.addTab("Wifi Analyzer", wifi_analyzer);

    jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Wifi HeatMap"));

    heatmap_new.setText("New");
    heatmap_new.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        heatmap_newActionPerformed(evt);
      }
    });

    heatmap_load.setText("Load");
    heatmap_load.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        heatmap_loadActionPerformed(evt);
      }
    });

    heatmap_save.setText("Save");
    heatmap_save.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        heatmap_saveActionPerformed(evt);
      }
    });

    heatmap_spot.setText("Analyze Spot");
    heatmap_spot.setEnabled(false);
    heatmap_spot.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        heatmap_spotActionPerformed(evt);
      }
    });

    heatmap_image.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    heatmap_image.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        heatmap_imageMouseClicked(evt);
      }
    });
    heatmap_scroll_pane.setViewportView(heatmap_image);

    jLabel22.setText("Map : ssid : 25 x 25");

    heatmap_export.setText("Export PNG");
    heatmap_export.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        heatmap_exportActionPerformed(evt);
      }
    });

    jLabel23.setText("Spot : 1, 1");

    heatmap_config.setText("Config");
    heatmap_config.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        heatmap_configActionPerformed(evt);
      }
    });

    heatmap_start.setText("Start");
    heatmap_start.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        heatmap_startActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
    jPanel11.setLayout(jPanel11Layout);
    jPanel11Layout.setHorizontalGroup(
      jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel11Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(heatmap_scroll_pane, javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(jPanel11Layout.createSequentialGroup()
            .addComponent(heatmap_new)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(heatmap_load)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(heatmap_save)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(heatmap_export)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(heatmap_config)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
            .addComponent(heatmap_start)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(heatmap_spot))
          .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    jPanel11Layout.setVerticalGroup(
      jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel11Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(heatmap_new)
          .addComponent(heatmap_load)
          .addComponent(heatmap_save)
          .addComponent(heatmap_spot)
          .addComponent(heatmap_export)
          .addComponent(heatmap_config)
          .addComponent(heatmap_start))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel22)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel23)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(heatmap_scroll_pane, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
        .addContainerGap())
    );

    javax.swing.GroupLayout wifi_heatmapLayout = new javax.swing.GroupLayout(wifi_heatmap);
    wifi_heatmap.setLayout(wifi_heatmapLayout);
    wifi_heatmapLayout.setHorizontalGroup(
      wifi_heatmapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(wifi_heatmapLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    wifi_heatmapLayout.setVerticalGroup(
      wifi_heatmapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(wifi_heatmapLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );

    tabs.addTab("Wifi HeatMap", wifi_heatmap);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(tabs)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(tabs)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void dnsResolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dnsResolveActionPerformed
    if (dns == null) {
      dnsIP.setText("");
      dns = new DNS(this, dnsServer.getText(), dnsHost.getText(), (String)dnsType.getSelectedItem());
      dns.start();
      dnsResolve.setText("Stop");
    } else {
      dns.close();
      dns = null;
      dnsResolve.setText("Resolve");
    }
  }//GEN-LAST:event_dnsResolveActionPerformed

  private void pingStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pingStartActionPerformed
    if (ping == null) {
      ping = new Ping(this, pingHost.getText());
      ping.start();
      pingStart.setText("Stop");
    } else {
      ping.close();
      ping = null;
      pingStart.setText("Start");
    }
  }//GEN-LAST:event_pingStartActionPerformed

  private void serverStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverStartActionPerformed
    if (server == null) {
      serverStart.setText("Stop");
      serverPort.setEnabled(false);
      server = new Server(this, Integer.valueOf(serverPort.getText()));
      server.start();
    } else {
      server.close();
      server = null;
      serverStart.setText("Start");
      serverPort.setEnabled(true);
      serverStatus.setText("Idle");
    }
  }//GEN-LAST:event_serverStartActionPerformed

  private void clientStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientStartActionPerformed
    startClientBandwidthTest();
  }//GEN-LAST:event_clientStartActionPerformed

  private void fileStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileStartActionPerformed
    if (fileTest == null) {
      fileTest = new FileTest(this, fileFile.getText());
      fileTest.start();
      fileStart.setText("Stop");
      fileFile.setEditable(false);
    } else {
      fileTest.close();
      fileTest = null;
      fileStart.setText("Start");
      fileFile.setEditable(true);
    }
  }//GEN-LAST:event_fileStartActionPerformed

  private void fileSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSelectActionPerformed
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    chooser.setMultiSelectionEnabled(false);
    chooser.setCurrentDirectory(new File(fileFile.getText()));
    if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
    fileFile.setText(chooser.getSelectedFile().toString().replaceAll("\\\\", "/"));
  }//GEN-LAST:event_fileSelectActionPerformed

  private void checkipStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkipStartActionPerformed
    getIP();
  }//GEN-LAST:event_checkipStartActionPerformed

  private void clientStart2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientStart2ActionPerformed
    startClientLatencyTest();
  }//GEN-LAST:event_clientStart2ActionPerformed

  private void netmap_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netmap_startActionPerformed
    netmap_map_start();
  }//GEN-LAST:event_netmap_startActionPerformed

  private void wifi_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wifi_startActionPerformed
    wifi_start();
  }//GEN-LAST:event_wifi_startActionPerformed

  private void heatmap_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatmap_startActionPerformed
    wifi_start();
  }//GEN-LAST:event_heatmap_startActionPerformed

  private void heatmap_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatmap_newActionPerformed
    heatmap_new();
  }//GEN-LAST:event_heatmap_newActionPerformed

  private void heatmap_loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatmap_loadActionPerformed
    heatmap_load();
  }//GEN-LAST:event_heatmap_loadActionPerformed

  private void heatmap_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatmap_saveActionPerformed
    heatmap_save();
  }//GEN-LAST:event_heatmap_saveActionPerformed

  private void heatmap_exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatmap_exportActionPerformed
    heatmap_export();
  }//GEN-LAST:event_heatmap_exportActionPerformed

  private void wifi_configActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wifi_configActionPerformed
    wifi_config();
  }//GEN-LAST:event_wifi_configActionPerformed

  private void heatmap_configActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatmap_configActionPerformed
    wifi_config();
  }//GEN-LAST:event_heatmap_configActionPerformed

  private void heatmap_spotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatmap_spotActionPerformed
    heatmap_spot();
  }//GEN-LAST:event_heatmap_spotActionPerformed

  private void heatmap_imageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_heatmap_imageMouseClicked
    click_spot(evt.getX(), evt.getY());
  }//GEN-LAST:event_heatmap_imageMouseClicked

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    boolean server = false;
    int port = 33000;
    if (args != null && args.length > 0) {
      for(int a=0;a<args.length;a++) {
        if (args[a].equals("-server")) {
          server = true;
        }
        else if (args[a].startsWith("-port=")) {
          port = Integer.valueOf(args[a].substring(6));
        }
      }
    }

    if (server) {
      new Server(null, port).start();
      return;
    }

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new NetApp().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel bandwidth;
  private javax.swing.JButton checkipStart;
  private javax.swing.JTextField clientHost;
  private javax.swing.JComboBox clientMode;
  private javax.swing.JTextField clientPort;
  private javax.swing.JButton clientStart;
  private javax.swing.JButton clientStart2;
  private javax.swing.JLabel clientStatus;
  private javax.swing.JLabel clientStatus2;
  private javax.swing.JTextField dnsHost;
  private javax.swing.JTextArea dnsIP;
  private javax.swing.JButton dnsResolve;
  private javax.swing.JTextField dnsServer;
  private javax.swing.JLabel dnsStatus;
  private javax.swing.JComboBox dnsType;
  private javax.swing.JTextField downSpeed;
  private javax.swing.JTextField fileFile;
  private javax.swing.JButton fileSelect;
  private javax.swing.JButton fileStart;
  private javax.swing.JLabel fileStatus;
  private javax.swing.JButton heatmap_config;
  private javax.swing.JButton heatmap_export;
  private javax.swing.JLabel heatmap_image;
  private javax.swing.JButton heatmap_load;
  private javax.swing.JButton heatmap_new;
  private javax.swing.JButton heatmap_save;
  private javax.swing.JScrollPane heatmap_scroll_pane;
  private javax.swing.JButton heatmap_spot;
  private javax.swing.JButton heatmap_start;
  private javax.swing.JTextField internetIP;
  private javax.swing.JTextField intranetIP;
  private javax.swing.JLabel ipStatus;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel13;
  private javax.swing.JLabel jLabel14;
  private javax.swing.JLabel jLabel15;
  private javax.swing.JLabel jLabel16;
  private javax.swing.JLabel jLabel17;
  private javax.swing.JLabel jLabel18;
  private javax.swing.JLabel jLabel19;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel20;
  private javax.swing.JLabel jLabel22;
  private javax.swing.JLabel jLabel23;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel10;
  private javax.swing.JPanel jPanel11;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JPanel jPanel6;
  private javax.swing.JPanel jPanel7;
  private javax.swing.JPanel jPanel8;
  private javax.swing.JPanel jPanel9;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JLabel latencyLabel;
  private javax.swing.JTextField latencyMaxEver;
  private javax.swing.JTextField latencyMaxWindow;
  private javax.swing.JPanel misc;
  private javax.swing.JPanel netmap;
  private javax.swing.JTextField netmap_host;
  private javax.swing.JTextField netmap_ports;
  private javax.swing.JTextArea netmap_results;
  private javax.swing.JButton netmap_start;
  private javax.swing.JTextField netmap_timeout;
  private javax.swing.JTextField pingHost;
  private javax.swing.JButton pingStart;
  private javax.swing.JLabel pingStatus;
  private javax.swing.JTextField serverPort;
  private javax.swing.JButton serverStart;
  private javax.swing.JLabel serverStatus;
  private javax.swing.JTabbedPane tabs;
  private javax.swing.JPanel tools;
  private javax.swing.JTextField upSpeed;
  private javax.swing.JPanel wifi_analyzer;
  private javax.swing.JButton wifi_config;
  private javax.swing.JPanel wifi_heatmap;
  private javax.swing.JButton wifi_start;
  private javax.swing.JTable wifi_table;
  // End of variables declaration//GEN-END:variables

  public Server server;
  public Client client;
  public Ping ping;
  public DNS dns;
  public FileTest fileTest;
  public int latency[];
  public char mode;
  public int maxEver, maxWindow;  //latency values

  private char getMode() {
    return ((String)clientMode.getSelectedItem()).charAt(0);
  }

  public void setServerStatus(String status) {
    serverStatus.setText(status);
  }

  public void setClientStatus(String status) {
    if (mode == 'L') {
      clientStatus2.setText(status);
    } else {
      clientStatus.setText(status);
    }
  }

  public void setReadSpeed(String spd) {
    downSpeed.setText(spd);
  }

  public void setWriteSpeed(String spd) {
    upSpeed.setText(spd);
  }

  public void setPingStatus(String status) {
    pingStatus.setText(status);
  }

  public void setDNSStatus(String status) {
    dnsStatus.setText(status);
  }

  public void setDNSIP(String status) {
    dnsIP.setText(status);
    dnsResolve.setText("Resolve");
    dnsStatus.setText("Idle");
    dns = null;
  }

  public void setFileStatus(String status) {
    fileStatus.setText(status);
  }

  public void fileTestComplete() {
    fileTest = null;
    fileStart.setText("Start");
    fileFile.setEditable(true);
  }

  private void getIP() {
    try {
      //detect internet ip
      BufferedReader reader = new BufferedReader(new InputStreamReader
        (new URI("http://checkip.dyndns.org").toURL().openStream()));
      String line = reader.readLine();
      int i1 = line.indexOf("Address: ");
      int i2 = line.indexOf("</body>");
      internetIP.setText(line.substring(i1+9, i2));
      //detect intranet ip
      Socket s = new Socket("checkip.dyndns.org", 80);
      String intra = s.getLocalAddress().getHostAddress();
      s.close();
      intranetIP.setText(intra);
    } catch (Exception e) {
      e.printStackTrace();
      ipStatus.setText(e.toString());
    }
  }

  private void startClientBandwidthTest() {
    if (client == null) {
      clientHost.setEnabled(false);
      clientPort.setEnabled(false);
      clientMode.setEnabled(false);
      clientStart.setText("Stop");
      clientStart2.setEnabled(false);
      mode = getMode();
      client = new Client(this, clientHost.getText(), Integer.valueOf(clientPort.getText()), mode);
      client.start();
    } else {
      client.close();
      client = null;
      clientStart.setText("Start");
      clientStart2.setEnabled(true);
      clientStatus.setText("Idle");
      clientHost.setEnabled(true);
      clientPort.setEnabled(true);
      clientMode.setEnabled(true);
    }
  }

  private void startClientLatencyTest() {
    if (client == null) {
      clientHost.setEnabled(false);
      clientPort.setEnabled(false);
      clientMode.setEnabled(false);
      clientStart2.setText("Stop");
      clientStart.setEnabled(false);
      mode = 'L';
      client = new Client(this, clientHost.getText(), Integer.valueOf(clientPort.getText()), mode);
      client.start();
      clearLatency();
    } else {
      client.close();
      client = null;
      clientStart2.setText("Start");
      clientStart.setEnabled(true);
      clientStatus2.setText("Idle");
      clientHost.setEnabled(true);
      clientPort.setEnabled(true);
      clientMode.setEnabled(true);
    }
  }

  /** Centers a window on screen (works with java.awt.Window/Frame javax.swing.JWindow/JFrame/JDialog */
  public static void centerWindow(java.awt.Window window) {
    Dimension d = window.getSize();
    Rectangle s = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
    window.setLocation(s.width/2 - d.width/2, s.height/2 - d.height/2);
  }

  private void clearLatency() {
    Arrays.fill(latency, 0);
    maxEver = 0;
    maxWindow = 0;
  }

  public void addLatency(int value) {
    for(int a=1;a<latency.length;a++) {
      latency[a-1] = latency[a];
    }
    latency[latency.length - 1] = value;
    latencyLabel.repaint();
  }

  public void paintLatency(Graphics g) {
    int w = latency.length;
    int h = latencyLabel.getHeight();
    int max = 1;
    for(int a=0;a<w;a++) {
      if (latency[a] > max) {
        max = latency[a];
      }
    }
    if (max > maxEver) {
      maxEver = max;
      latencyMaxEver.setText(Integer.toString(maxEver));
//      latencyMaxEver.repaint();
    }
    if (max != maxWindow) {
      maxWindow = max;
      latencyMaxWindow.setText(Integer.toString(maxWindow));
//      latencyMaxWindow.repaint();
    }
    g.setColor(Color.black);
    g.fillRect(0, 0, w, h);
    g.setColor(Color.green);
    for(int x=0;x<w;x++) {
      int y = h - (latency[x] * 100 / max);
      if (y >= h) y = h-1;
      if (y < 0) y = 0;
      g.drawLine(x, y, x, h-1);
    }
  }

  private class NetMap extends Thread {
    public StringBuilder log = new StringBuilder();
    public boolean active;
    public int timeout;
    public String host;
    public void gui(Runnable run) {
      java.awt.EventQueue.invokeLater(run);
    }
    public void setLog() {
      gui(new Runnable() {public void run() {netmap_results.setText(log.toString());}});
    }
    public void test(int port) {
      try {
        SocketAddress addr = new InetSocketAddress(host, port);
        Socket s = new Socket();
        s.connect(addr, timeout);
        s.close();
        log.append("PASS:" + port + "\n");
      } catch (SocketTimeoutException to) {
        log.append("FAIL:" + port + "\n");
      } catch (ConnectException to) {
        log.append("FAIL:" + port + "\n");
      } catch (Exception e) {
        log.append(e.toString() + "\n");
      }
    }
    public void run() {
      active = true;
      try {
        host = netmap_host.getText();
        String[] str_ports = netmap_ports.getText().split(",");
        timeout = Integer.valueOf(netmap_timeout.getText());
        log.append("Host=" + host + "\n");
        setLog();
        for(int i=0;i<str_ports.length;i++) {
          if (!active) break;
          String port = str_ports[i];
          if (port.indexOf('-') == -1) {
            //single port
            test(Integer.valueOf(port));
            setLog();
          } else {
            //port range
            int idx = port.indexOf('-');
            int start = Integer.valueOf(port.substring(0, idx));
            int stop = Integer.valueOf(port.substring(idx + 1));
            for(int p = start;p < stop;p++) {
              if (!active) break;
              test(p);
              setLog();
            }
          }
        }
      } catch (Exception e) {
        log.append(e.toString());
      }
      setLog();
      gui(new Runnable() {public void run() {netmap_start.setText("Start"); netmap_setstate(true);}});
      netmap_thread = null;
    }
    public void cancel() {
      active = false;
    }
  }

  private NetMap netmap_thread;

  public void netmap_map_start() {
    if (netmap_thread == null) {
      netmap_start.setText("Stop");
      netmap_results.setText("Starting...");
      netmap_setstate(false);
      netmap_thread = new NetMap();
      netmap_thread.start();
    } else {
      netmap_thread.cancel();
    }
  }

  private void netmap_setstate(boolean state) {
    netmap_host.setEditable(state);
    netmap_ports.setEditable(state);
    netmap_timeout.setEditable(state);
  }

  private WifiAnalyzer wifi;

  private void wifi_start() {
    if (wifi == null) {
      wifi = new WifiAnalyzer();
      wifi.setCallback(this);
      wifi.start();
      wifi_start.setText("Stop");
      wifi_config.setEnabled(false);
      heatmap_config.setEnabled(false);
      heatmap_start.setText("Stop");
      heatmap_spot.setEnabled(true);
    } else {
      wifi.cancel();
      wifi = null;
      wifi_start.setText("Start");
      wifi_config.setEnabled(true);
      heatmap_config.setEnabled(true);
      heatmap_start.setText("Start");
      heatmap_spot.setEnabled(false);
    }
  }

  //interface WifiAnalyzer.Callback

  public void callback(SSID[] ssids) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        DefaultTableModel model = (DefaultTableModel)wifi_table.getModel();
        while (model.getRowCount() > 0) {
          model.removeRow(0);
        }
        for(SSID ssid : ssids) {
          for(SSID.AP ap : ssid.aps) {
            model.addRow(new String[] {ssid.ssid, Integer.toString(ap.channel), Integer.toString(ap.dbm), ssid.encryption});
          }
        }
      }
    });
  }

  public void error(String msg) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        if (wifi != null) {
          wifi_start();
        }
        JFAWT.showError("Error", msg);
      }
    });
  }

  private void wifi_config() {
    if (JF.isWindows()) {
      JFAWT.showMessage("No config", "No config needed for Windows");
    } else {
      WifiAnalyzer.device = JFAWT.getString("Enter Wifi Device", WifiAnalyzer.device);
    }
  }

  private HeatMap map;

  private int spot_x = -1, spot_y = -1;

  private void heatmap_new() {
    GetWifiHeatMap dialog = new GetWifiHeatMap(this, true);
    dialog.setVisible(true);
    if (!dialog.accepted) return;
    createMap(dialog.getWidth(), dialog.getHeight(), dialog.getSSID());
  }

  private void createMap(int x, int y, String ssid) {
    map = new HeatMap();
    map.x = x;
    map.y = y;
    map.ssid = ssid;
    map.map = new int[y][x];
    spot_x = -1;
    spot_y = -1;
    updateMap();
  }

  private static int WHITE = 0xffffffff;
  private static int BLACK = 0xff000000;

  private JFImage updateMap() {
    int x = map.x;
    int y = map.y;
    int fx = map.x * 10;
    int fy = map.y * 10;
    JFImage img = new JFImage(fx, fy);
    img.fill(0, 0, fx, fy, WHITE);
    for(int yp=0;yp<y;yp++) {
      for(int xp=0;xp<x;xp++) {
        int clr = 0;
        int sig = map.map[yp][xp];
        if (sig < -100 || sig > -50) {
          sig = 0;  //invalid value
        }
        if (sig == 0) {
          clr = 0xffffff;
        } else {
          //gradient : -100 (red) to -50 (green)
          sig = ((-sig - 50) * 2);  //0-100%
          int red = (100 - sig) * 255;
          int grn = sig * 255;
          clr = red << 16 + grn << 8;
        }
        clr |= 0xff000000;
        img.fill(xp * 10, yp * 10, 10, 10, clr);
      }
    }
    if (spot_x != -1 && spot_y != -1) {
      img.box(spot_x * 10, spot_y * 10, 9, 9, BLACK);
    }
    heatmap_image.setSize(img.getSize());
    heatmap_image.setIcon(img);
    return img;
  }

  private String[][] heatmap_files = new String[][] {
    {"HeatMap", "heatmap"}
  };

  private void heatmap_load() {
    String filename = JFAWT.getOpenFile(JF.getUserPath(), heatmap_files);
    if (filename == null) return;
    map.load(filename);
    updateMap();
  }

  private void heatmap_save() {
    String filename = JFAWT.getSaveAsFile(JF.getUserPath(), heatmap_files);
    if (filename == null) return;
    map.save(filename);
  }

  private String[][] png_files = new String[][] {
    {"PNG Image", "png"}
  };

  private void heatmap_export() {
    spot_x = -1;
    spot_y = -1;
    JFImage img = updateMap();
    String filename = JFAWT.getSaveAsFile(JF.getUserPath(), png_files);
    if (filename == null) return;
    img.savePNG(filename);
  }

  private void heatmap_spot() {
    if (spot_x == -1 || spot_y == -1) return;
    if (wifi == null) return;
    //adjust signal strength
    map.map[spot_y][spot_x] = getSpotSignalStrength();
  }

  private int INF = 1000;  //invalid dbm

  private int getSpotSignalStrength() {
    SSID[] ssids = wifi.query();
    for(SSID ssid : ssids) {
      if (ssid.ssid.equals(map.ssid)) {
        int best = -INF;  //-50 thru -100
        for(SSID.AP ap : ssid.aps) {
          if (ap.dbm > best) {
            best = ap.dbm;
          }
        }
        if (best != -INF) {
          return best;
        }
      }
    }
    return 0;
  }

  private void click_spot(int x, int y) {
    spot_x = x / 10;
    spot_y = y / 10;
    if ((spot_x >= map.x) || (spot_y >= map.y)) {
      spot_x = -1;
      spot_y = -1;
    }
    updateMap();
  }
}
