/**
 *
 * @author pquiring
 *
 * Created : Sept 25, 2013
 */

import java.io.*;
import java.util.*;
import javax.swing.*;

import javaforce.*;
import javaforce.awt.*;
import javaforce.service.*;
import javaforce.media.*;

public class MainPanel extends javax.swing.JPanel implements MediaIO, WebHandler {

  public static String version = "0.14";

  public static class Codec {
    public String codec, ext, desc, mime;
    public Codec(String codec, String mime) {
      this.codec = codec;
      this.ext = "." + codec;
      this.desc = codec.toUpperCase() + " (*." + codec + ")";
      this.mime = mime;
    }
  }

  public Codec avi = new Codec("avi", "application/ms-avi");
  public Codec mp4 = new Codec("mp4", "video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"");
  public Codec webm = new Codec("webm", "video/webm; codecs=\"vp9,opus\"");

  public static String m4s_mimetype = "video/iso.segment";

  public Codec selected_codec;

  /**
   * Creates new form MainPanel
   */
  public MainPanel() {
    initComponents();
    listCameras();
    listAudioDevices();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup1 = new javax.swing.ButtonGroup();
    buttonGroup2 = new javax.swing.ButtonGroup();
    buttonGroup3 = new javax.swing.ButtonGroup();
    jPanel1 = new javax.swing.JPanel();
    jLabel5 = new javax.swing.JLabel();
    segmentSecs = new javax.swing.JTextField();
    aBitRate = new javax.swing.JComboBox<>();
    stereo = new javax.swing.JRadioButton();
    audio = new javax.swing.JRadioButton();
    jLabel7 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    refresh = new javax.swing.JButton();
    cameraDevices = new javax.swing.JComboBox<>();
    protocol = new javax.swing.JComboBox<>();
    jLabel6 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    stopMotion = new javax.swing.JRadioButton();
    next = new javax.swing.JButton();
    vBitRate = new javax.swing.JComboBox<>();
    codec = new javax.swing.JComboBox<>();
    jLabel13 = new javax.swing.JLabel();
    seconds = new javax.swing.JSpinner();
    port = new javax.swing.JTextField();
    resolution = new javax.swing.JComboBox<>();
    broadcast = new javax.swing.JRadioButton();
    jLabel9 = new javax.swing.JLabel();
    freq = new javax.swing.JComboBox<>();
    noaudio = new javax.swing.JRadioButton();
    jLabel11 = new javax.swing.JLabel();
    mono = new javax.swing.JRadioButton();
    jLabel10 = new javax.swing.JLabel();
    timeLapse = new javax.swing.JRadioButton();
    record = new javax.swing.JRadioButton();
    fps = new javax.swing.JSpinner();
    jLabel4 = new javax.swing.JLabel();
    jLabel12 = new javax.swing.JLabel();
    jLabel1 = new javax.swing.JLabel();
    audioDevices = new javax.swing.JComboBox<>();
    jLabel8 = new javax.swing.JLabel();
    jPanel2 = new javax.swing.JPanel();
    previewVideo = new javax.swing.JLabel();
    start = new javax.swing.JButton();
    preview = new javax.swing.JCheckBox();
    previewAudio = new javax.swing.JProgressBar();
    stats = new javax.swing.JLabel();

    jLabel5.setText("Video Quality");

    segmentSecs.setText("5");

    aBitRate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "256k", "192k", "128k", "64k", "32k" }));
    aBitRate.setSelectedIndex(2);
    aBitRate.setToolTipText("");

    buttonGroup2.add(stereo);
    stereo.setText("stereo");

    buttonGroup1.add(audio);
    audio.setSelected(true);
    audio.setText("Audio");

    jLabel7.setText("Freq:");

    jLabel2.setText("Seconds delay per frame");

    refresh.setText("Refresh");
    refresh.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        refreshActionPerformed(evt);
      }
    });

    cameraDevices.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        cameraDevicesItemStateChanged(evt);
      }
    });

    protocol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HTTP" }));

    jLabel6.setText("Audio Quality");

    jLabel3.setText("FPS");

    buttonGroup1.add(stopMotion);
    stopMotion.setText("Stop Motion (user advance frame)");

    next.setText("Next Frame");
    next.setEnabled(false);
    next.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nextActionPerformed(evt);
      }
    });

    vBitRate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8M", "6M", "4M", "2M", "1M", "800k", "400k", "200k" }));
    vBitRate.setSelectedIndex(4);
    vBitRate.setToolTipText("");

    codec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AVI", "MP4", "WEBM" }));

    jLabel13.setText("Codec");

    seconds.setModel(new javax.swing.SpinnerNumberModel(60, 1, 3600, 1));

    port.setText("80");

    resolution.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "640x480", "1280x720" }));

    buttonGroup3.add(broadcast);
    broadcast.setText("Broadcast ");
    broadcast.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        broadcastActionPerformed(evt);
      }
    });

    jLabel9.setText("bits/sec");

    freq.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "48000", "44100", "22050", "11025", "8000" }));
    freq.setSelectedIndex(1);

    buttonGroup1.add(noaudio);
    noaudio.setText("No Audio");

    jLabel11.setText("Segment Size (secs)");

    buttonGroup2.add(mono);
    mono.setSelected(true);
    mono.setText("mono");

    jLabel10.setText("Port");

    buttonGroup1.add(timeLapse);
    timeLapse.setText("Time Lapse");

    buttonGroup3.add(record);
    record.setSelected(true);
    record.setText("Record to file");
    record.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        recordActionPerformed(evt);
      }
    });

    fps.setModel(new javax.swing.SpinnerNumberModel(24, 1, 60, 1));

    jLabel4.setText("Audio Device");

    jLabel12.setText("Resolution");

    jLabel1.setText("Camera Device");

    jLabel8.setText("bits/sec");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
            .addGroup(jPanel1Layout.createSequentialGroup()
              .addComponent(timeLapse)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addComponent(seconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addComponent(jLabel2))
            .addGroup(jPanel1Layout.createSequentialGroup()
              .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel3)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(fps, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabel12)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(resolution, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                      .addComponent(audio)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(jLabel7))
                    .addComponent(noaudio))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(freq, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(mono)))
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
              .addComponent(stereo))
            .addGroup(jPanel1Layout.createSequentialGroup()
              .addComponent(jLabel6)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addComponent(aBitRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addComponent(jLabel9))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
              .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(stopMotion)
                .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel5)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(vBitRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel8)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel13)))
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGap(0, 0, Short.MAX_VALUE)
                  .addComponent(next))
                .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(codec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(0, 0, Short.MAX_VALUE)))))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel1)
              .addComponent(jLabel4))
            .addGap(13, 13, 13)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(cameraDevices, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(audioDevices, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(refresh))
          .addComponent(record)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(broadcast)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(protocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel11)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(segmentSecs, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(cameraDevices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(audioDevices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(fps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel3)
          .addComponent(jLabel12)
          .addComponent(resolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(audio)
          .addComponent(freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(mono)
          .addComponent(stereo)
          .addComponent(jLabel7))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(noaudio)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(timeLapse)
          .addComponent(seconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(next)
          .addComponent(stopMotion))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(codec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel5)
            .addComponent(vBitRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel8)
            .addComponent(jLabel13)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(aBitRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel9))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(record)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(broadcast)
          .addComponent(protocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel10)
          .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel11)
          .addComponent(segmentSecs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    previewVideo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    previewVideo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    previewVideo.setFocusable(false);
    previewVideo.setInheritsPopupMenu(false);

    start.setText("Start");
    start.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        startActionPerformed(evt);
      }
    });

    preview.setSelected(true);
    preview.setText("Preview");
    preview.setToolTipText("Preview (can reduce frame rate)");

    previewAudio.setOrientation(1);
    previewAudio.setToolTipText("");

    stats.setText("Stats:...");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(preview)
            .addGroup(jPanel2Layout.createSequentialGroup()
              .addComponent(previewVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addComponent(previewAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addComponent(stats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(start)
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(preview)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(previewVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(previewAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(stats)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(start)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(15, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
    start();
  }//GEN-LAST:event_startActionPerformed

  private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
    synchronized(doNext) {
      doNext.notify();
    }
  }//GEN-LAST:event_nextActionPerformed

  private void cameraDevicesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cameraDevicesItemStateChanged
    listModes();
  }//GEN-LAST:event_cameraDevicesItemStateChanged

  private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
    listCameras();
  }//GEN-LAST:event_refreshActionPerformed

  private void recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordActionPerformed
    listCodecs();
  }//GEN-LAST:event_recordActionPerformed

  private void broadcastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_broadcastActionPerformed
    listCodecs();
  }//GEN-LAST:event_broadcastActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox<String> aBitRate;
  private javax.swing.JRadioButton audio;
  private javax.swing.JComboBox<String> audioDevices;
  private javax.swing.JRadioButton broadcast;
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.ButtonGroup buttonGroup2;
  private javax.swing.ButtonGroup buttonGroup3;
  private javax.swing.JComboBox<String> cameraDevices;
  private javax.swing.JComboBox<String> codec;
  private javax.swing.JSpinner fps;
  private javax.swing.JComboBox<String> freq;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel13;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JRadioButton mono;
  private javax.swing.JButton next;
  private javax.swing.JRadioButton noaudio;
  private javax.swing.JTextField port;
  private javax.swing.JCheckBox preview;
  private javax.swing.JProgressBar previewAudio;
  private javax.swing.JLabel previewVideo;
  private javax.swing.JComboBox<String> protocol;
  private javax.swing.JRadioButton record;
  private javax.swing.JButton refresh;
  private javax.swing.JComboBox<String> resolution;
  private javax.swing.JSpinner seconds;
  private javax.swing.JTextField segmentSecs;
  private javax.swing.JButton start;
  private javax.swing.JLabel stats;
  private javax.swing.JRadioButton stereo;
  private javax.swing.JRadioButton stopMotion;
  private javax.swing.JRadioButton timeLapse;
  private javax.swing.JComboBox<String> vBitRate;
  // End of variables declaration//GEN-END:variables

  private Camera camera;
  private AudioInput mic;
  private RandomAccessFile raf;
  private MediaEncoder encoder;
  private Web broadcaster;
  private ArrayList<String> tempFiles = new ArrayList<>();
  private boolean active = false;
  private boolean working = false;
  private Object doNext = new Object();

  public void listCameras() {
    camera = new Camera();
    camera.init();
    String list[] = camera.listDevices();
    camera.uninit();
    camera = null;
    cameraDevices.removeAllItems();
    if (list == null) {
      JFAWT.showError("Error", "No camera detected");
      return;
    }
    for(String device : list) {
      cameraDevices.addItem(device);
    }
    listModes();
  }

  public void listModes() {
    resolution.removeAllItems();
    int idx = cameraDevices.getSelectedIndex();
    if (idx == -1) return;
    camera = new Camera();
    camera.init();
    camera.listDevices();
    String list[] = camera.listModes(idx);
    camera.uninit();
    camera = null;
    if (list == null) {
      JFAWT.showError("Error", "No camera modes");
      return;
    }
    for(String mode : list) {
      resolution.addItem(mode);
    }
  }

  public void listCodecs() {
    codec.removeAllItems();
    if (record.isSelected()) {
      codec.addItem("AVI");  //does not support streaming
      codec.addItem("MP4");  //does not work with broadcast yet (need ISO BMFF packetization)
    }
    codec.addItem("WEBM");
  }

  public void listAudioDevices() {
    mic = new AudioInput();
    String list[] = mic.listDevices();
    audioDevices.removeAllItems();
    for(int a=0;a<list.length;a++) {
      audioDevices.addItem(list[a]);
    }
  }

  public void setState(boolean state) {
    start.setEnabled(state);
    if (state) start.setText("Start");
    cameraDevices.setEnabled(state);
    refresh.setEnabled(state);
    audioDevices.setEnabled(state);
    audio.setEnabled(state);
    noaudio.setEnabled(state);
    timeLapse.setEnabled(state);
    stopMotion.setEnabled(state);
    seconds.setEnabled(state);
    mono.setEnabled(state);
    stereo.setEnabled(state);
    freq.setEnabled(state);
    fps.setEnabled(state);
    resolution.setEnabled(state);
    preview.setEnabled(state);
    vBitRate.setEnabled(state);
    aBitRate.setEnabled(state);
    codec.setEnabled(state);
    record.setEnabled(state);
    broadcast.setEnabled(state);
    protocol.setEnabled(state);
    port.setEnabled(state);
  }

  public void start() {
    if (working) {
      active = false;
      start.setText("Stopping");
      if (stopMotion.isSelected()) {
        synchronized(doNext) {
          doNext.notify();
        }
      }
      return;
    }
    working = true;
    setState(false);
    new Worker().start();
  }

  public void failed(String msg) {
    JFAWT.showError("Error", msg);
    setState(true);
    working = false;
  }

  public int amplitude(short sams[]) {
    short peak = 0;
    int len = sams.length;
    for(int a=0;a<len;a++) {
      if (sams[a] > peak) peak = sams[a];
    }
    return (peak * 100) / 32768;
  }

  public void swapEndian(byte in[], short out[]) {
    int p = 0;
    for(int a=0;a<out.length;a++) {
      out[a] = in[p++];
      out[a] <<= 8;
      out[a] += in[p++] & 0xff;
    }
  }

  private int frameRate;
  private int audioRate;
  private boolean doAudio;
  private boolean doRecord;
  private boolean doImage;
  private int chs;
  private int width, height;
  private int timeLapseSecondsDelay;
  private int samples;
  private int segment;
  private int segmentTimeMax;
  private String mediaFile;
  private byte[] image;
  private byte[] mpd;
  private boolean encoder_start() {
    return encoder.start(this, width, height, frameRate, chs, audioRate, selected_codec.codec, true, doAudio);
  }
  private void encoder_stop() {
    encoder.stop();
  }
  private boolean create_file() {
    try {
      raf = new RandomAccessFile(mediaFile, "rw");
      raf.setLength(0);
      return true;
    } catch (Exception e) {
      JFLog.log(e);
      failed("Unable to create output file");
      return false;
    }
  }

  private void close_file() {
    if (raf != null) {
      try {raf.close();} catch (Exception e) {}
      raf = null;
    }
  }

  public class Worker extends Thread {
    public void run() {
      doRecord = record.isSelected();
      segmentTimeMax = JF.atoi(segmentSecs.getText());
      if (segmentTimeMax < 0) {
        segmentTimeMax = 1;
      }
      if (segmentTimeMax > 60) {
        segmentTimeMax = 60;
      }
      segmentTimeMax *= 1000;
      JFLog.log("segmentTimeMax=" + segmentTimeMax);
      tempFiles.clear();
      int idx = cameraDevices.getSelectedIndex();
      if (idx == -1) {
        failed("Please select a camera device");
        return;
      }
      setState(false);
      segment = 1;

      //get selected codec
      switch ((String)codec.getSelectedItem()) {
        case "AVI": selected_codec = avi; break;
        case "MP4": selected_codec = mp4; break;
        case "WEBM": selected_codec = webm; break;
      }

      if (doRecord) {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        chooser.setCurrentDirectory(new File(JF.getUserPath() + "/Videos"));
        javax.swing.filechooser.FileFilter ffAVI = new javax.swing.filechooser.FileFilter() {
          public boolean accept(File file) {
            if (file.isDirectory()) return true;
            if (file.getName().endsWith(selected_codec.ext)) return true;
            return false;
          }
          public String getDescription() {
            return selected_codec.desc;
          }
          public String toString() {
            return selected_codec.ext;
          }
        };
        chooser.addChoosableFileFilter(ffAVI);
        chooser.setFileFilter(ffAVI);
        if (chooser.showSaveDialog(MainPanel.this) != JFileChooser.APPROVE_OPTION) {
          setState(true);
          working = false;
          return;
        }
        mediaFile = chooser.getSelectedFile().getAbsolutePath();
        String fnlc = mediaFile.toLowerCase();
        if ((!fnlc.endsWith(selected_codec.ext))) {
    //      javax.swing.filechooser.FileFilter ff = chooser.getFileFilter();
    //      fn += ff.toString();
          mediaFile += selected_codec.ext;
        }
      } else {
        mediaFile = getTempFile();
      }
      doAudio = audio.isSelected();
      if (timeLapse.isSelected() || stopMotion.isSelected()) {
        doImage = true;
        doAudio = false;
      } else {
        doImage = false;
      }
      audioRate = JF.atoi((String)freq.getSelectedItem());
      if (audioRate < 8000 || audioRate > 44100) audioRate = 44100;
      chs = mono.isSelected() ? 1 : 2;
      frameRate = (Integer)fps.getValue();
      timeLapseSecondsDelay = (Integer)seconds.getValue();
      samples = audioRate * chs / frameRate;
      if (!doImage) {
        if (!create_file()) return;
      }

      String res = (String)resolution.getSelectedItem();
      String[] resParts = res.split("x");
      int res_width = JF.atoi(resParts[0]);
      int res_height = JF.atoi(resParts[1]);

      camera = new Camera();
      camera.init();
      camera.listDevices();
      if (!camera.start(cameraDevices.getSelectedIndex(), res_width, res_height)) {
        failed("Unable to start recording from camera");
        return;
      }

      width = camera.getWidth();
      height = camera.getHeight();
      JFLog.log("size=" + width + "," + height);
      JFLog.log("frameRate=" + frameRate);
      JFLog.log("audioRate=" + audioRate + ",chs=" + chs);

      if (!doImage) {
        encoder = new MediaEncoder();
        encoder.setAudioBitRate(getAudioBitRate());
        encoder.setVideoBitRate(getVideoBitRate());
        encoder.setFramesPerKeyFrame(frameRate);
        if (!doRecord) {
          encoder.setDASH(true);
          encoder.setCompressLevel(1);  //faster compression for vp9
        }
        if (!encoder_start())
        {
          failed("Unable to start encoder");
          return;
        }
      }
      if (doAudio) {
        mic = new AudioInput();
        if (!mic.start(chs, audioRate, 16, samples * 2, (String)audioDevices.getSelectedItem())) {
          failed("Unable to start recording audio");
          return;
        }
      }
      if (!doRecord) {
        mpd = getMPD();
      }

      active = true;
      start.setText("Stop");
      start.setEnabled(true);
      byte sams8[] = new byte[samples*2];
      short sams16[] = new short[samples];
      boolean skip_frame = false;

      //sync video/audio
      boolean ready;
      do{
        ready = camera.getFrame() != null;
        if (doAudio) {
          int max = 10;
          while (!mic.read(sams8)) {
            max--;
            if (max == 0) break;
            JF.sleep(100);
          }
        }
      } while (active && !ready);

      long currentTime = System.currentTimeMillis();
      long segmentTime = currentTime;
      double delayTime = 1000.0 / frameRate;
      double countTime = 0.0;
      long secondTime = currentTime / 1000;
      int frameCount = 0;
      int avgFrameRate = frameRate;
      JFLog.log("delayTime=" + delayTime);
      int px[] = null;
      boolean doPreview = preview.isSelected();
      int previewWidth = previewVideo.getWidth();
      int previewHeight = previewVideo.getHeight();
      JFImage previewImg = new JFImage(previewWidth, previewHeight);
      JFImage videoImg = new JFImage(width, height);
      Icon orgPreview = previewVideo.getIcon();

      if (stopMotion.isSelected()) {
        next.setEnabled(true);
      }

      if (!doRecord) {
        broadcaster_start();
      }

      while (active) {
        if (!skip_frame) {
          px = camera.getFrame();
          if (px != null) {
            videoImg.putPixels(px, 0,0,width,height,0);
            if (doPreview) {
              previewImg.putJFImageScale(videoImg, 0, 0, previewWidth, previewHeight);
              previewVideo.setIcon(previewImg);
              previewVideo.repaint();
            }
            if (doImage) {
              ByteArrayOutputStream baos = new ByteArrayOutputStream();
              videoImg.saveJPG(baos);
              image = baos.toByteArray();
            }
          }
        } else {
          skip_frame = false;
        }
        if (px == null) {
          JFLog.log("no video frame:sleeping 5ms");
          JF.sleep(5);
          continue;
        }
        if (!doImage) {
          long start = System.currentTimeMillis();
          encoder.addVideo(px);
          long stop = System.currentTimeMillis();
          long delta = stop - start;
          if (!doRecord) {
            stats.setText(String.format("Stats:encode=%02d:segment=%02d:fps=%02d", delta, segment, avgFrameRate));
          } else {
            stats.setText(String.format("Stats:encode=%02d:fps=%02d", delta, avgFrameRate));
          }
        }
        frameCount++;
        if (doAudio) {
          while (mic.read(sams8)) {
            swapEndian(sams8, sams16);
            encoder.addAudio(sams16);
            if (doPreview) {
              previewAudio.setValue(amplitude(sams16));
            }
          }
        }
        if (stopMotion.isSelected()) {
          synchronized(doNext) {
            try {doNext.wait();} catch (Exception e) {}
          }
          continue;
        }
        if (timeLapse.isSelected()) {
          for(int a=0;a<timeLapseSecondsDelay;a++) {
            JF.sleep(1000);
            if (!active) break;
          }
          continue;
        }
        long nowTime = System.currentTimeMillis();
        int sleep = (int)(delayTime - (nowTime - currentTime));
        long nowSecondTime = nowTime / 1000;
        if (nowSecondTime != secondTime) {
          secondTime = nowSecondTime;
          avgFrameRate = frameCount;
          frameCount = 0;
        }
        if (sleep > 0) {
          JFLog.log("sleep = " + sleep);
          JF.sleep(sleep);
        } else {
          JFLog.log("sleep <= 0");
          skip_frame = true;  //system too slow
        }
        countTime += delayTime;
        long ms = (long)countTime;
        countTime -= ms;
        currentTime += ms;
        if (!doRecord && !doImage) {
          long duration = nowTime - segmentTime;
          if (duration > segmentTimeMax) {
            JFLog.log("    nowTime=" + nowTime);
            JFLog.log("currentTime=" + currentTime);
            JFLog.log("segmentTime=" + segmentTime);
            JFLog.log("duratioTime=" + duration);
            //stop segment and start new segment
//              encoder_stop();
            close_file();
            JFLog.log("AddSegment:" + mediaFile);
            tempFiles.add(mediaFile);
            if (tempFiles.size() > 10) {
              //keep segment # 1
              String oldFile = tempFiles.remove(1);
              new File(oldFile).delete();
            }
            segment++;
            mediaFile = getTempFile();
            create_file();
//              encoder_start();
            segmentTime = currentTime;
          }
        }
      }
      if (!doImage) {
        encoder_stop();
        encoder = null;
      }
      if (broadcaster != null) {
        broadcaster_stop();
      }
      camera.stop();
      camera.uninit();
      camera = null;
      if (doAudio) mic.stop();
      if (!doImage) {
        close_file();
      }
      if (!doRecord) {
        //delete all temp files
        for(String file : tempFiles) {
          new File(file).delete();
        }
      }
      working = false;
      if (stopMotion.isSelected()) next.setEnabled(false);
      setState(true);
      previewVideo.setIcon(orgPreview);
      previewAudio.setValue(0);
    }
  }

  //MediaIO interface
  public int read(MediaCoder coder, byte[] bytes) {
    return 0;
  }

  public int write(MediaCoder coder, byte[] bytes) {
    try {
      raf.write(bytes);
      return bytes.length;
    } catch (Exception e) {
      JFLog.log(e);
      return 0;
    }
  }

  public long seek(MediaCoder coder, long pos, int how) {
    try {
      switch (how) {
        case MediaCoder.SEEK_SET: break;
        case MediaCoder.SEEK_CUR: pos += raf.getFilePointer(); break;
        case MediaCoder.SEEK_END: pos += raf.length(); break;
      }
      raf.seek(pos);
      return pos;
    } catch (Exception e) {
      JFLog.log(e);
    }
    return 0;
  }

  private int getRate(String rate) {
    int scale = 1;
    if (rate.endsWith("M")) {
      rate = rate.substring(0, rate.length()-1);
      scale = 1024 * 1024;
    }
    else if (rate.endsWith("k")) {
      rate = rate.substring(0, rate.length()-1);
      scale = 1024;
    }
    int value = JF.atoi(rate) * scale;
    System.out.println("rate=" + value);
    return value;
  }

  private int getAudioBitRate() {
    return getRate((String)aBitRate.getSelectedItem());
  }

  private int getVideoBitRate() {
    return getRate((String)vBitRate.getSelectedItem());
  }

  private String getTempFile() {
    return JF.getTempPath() + "/segment-" + segment + selected_codec.ext;
  }

  private byte[] getMPD() {
    StringBuilder sb = new StringBuilder();
    sb.append(
"<MPD xmlns=\"urn:mpeg:dash:schema:mpd:2011\" minBufferTime=\"PT1.500S\" type=\"dynamic\" minimumUpdatePeriod=\"PT0H0M4.000S\" \n" +
"maxSegmentDuration=\"PT0H0M1.167S\" profiles=\"urn:mpeg:dash:profile:isoff-live:2011\">\n" +
" <Period id=\"DID1\" start=\"PT0H0M0.000S\">\n" +
"  <AdaptationSet segmentAlignment=\"true\" maxWidth=\"" + width + "\" maxHeight=\"" + height + "\" maxFrameRate=\"" + frameRate + "\" par=\"16:9\" lang=\"und\" startWithSAP=\"1\">\n" +
"   <SegmentTemplate media=\"'$RepresentationID$_$Number%03d$'.m4s\" initialization=\"'$RepresentationID$_'.mp4\" timescale=\"12288\" startNumber=\"1\" duration=\"12288\"/>\n" +
"   <Representation id=\"1\" mimeType=\"video/mp4\" codecs=\"avc1.42C01F\" width=\"" + width + "\" height=\"" + height + "\" frameRate=\"12288/508\" sar=\"1:1\" bandwidth=\"1208374\">\n" +
"   </Representation>\n" +
"  </AdaptationSet>\n" +
" </Period>\n" +
"</MPD>"
    );
    return sb.toString().getBytes();
  }

  public void broadcaster_start() {
    int webport = JF.atoi(port.getText());
    if (webport < 1) {
      webport = 80;
    }
    if (webport > 65535) {
      webport = 80;
    }
    broadcaster = new Web();
    broadcaster.start(this, webport, false);
  }

  public void broadcaster_stop() {
    broadcaster.stop();
    broadcaster = null;
  }

  public void doPost(WebRequest req, WebResponse res) {
    doGet(req, res);
  }

  public void doGet(WebRequest req, WebResponse res) {
    String url = req.getURL();
    if (url.length() == 0) url = "/";
    if (url.equals("/")) {
      String html;
      if (doImage) {
        html = getHTMLImage();
      } else {
        html = getHTMLVideo();
      }
      try {
        res.write(html.getBytes());
      } catch (Exception e) {}
    }
    if (url.endsWith(selected_codec.ext)) {
      //send segment
      String file = JF.getTempPath() + url;
      if (!tempFiles.contains(file)) {
        JFLog.log("WebMediaNotFound:" + file);
        res.setStatus(404, "File not found");
        return;
      }
      try {
        res.setContentType(selected_codec.mime);
        FileInputStream fis = new FileInputStream(file);
        byte[] data = fis.readAllBytes();
        fis.close();
        res.write(data);
      } catch (Exception e) {}
    }
    if (url.endsWith(".jpg")) {
      if (image == null) {
        res.setStatus(404, "Not Ready");
        return;
      }
      try {
        res.write(image);
      } catch (Exception e) {}
    }
    if (url.endsWith(".mpd")) {
      if (mpd == null) {
        res.setStatus(404, "Not Ready");
        return;
      }
      try {
        res.write(mpd);
      } catch (Exception e) {}
    }
    if (url.endsWith(".idx")) {
      int idx = segment;
      if (tempFiles.size() > 1) {
        idx -= tempFiles.size() - 1;
      }
      try {
        res.write(Integer.toString(idx).getBytes());
      } catch (Exception e) {}
    }
  }

  private String getHTMLVideo() {
    StringBuilder html = new StringBuilder();
    html.append(
"<script>" +
"var segment=1;\n" +
"var loaded=0;\n" +
"var media;\n" +
"var buffer;\n" +
"var video;\n" +
"var error;\n" +
"function getSegment() {\n" +
"  console.log('getSegment');\n" +
"  var req = new XMLHttpRequest();\n" +
"  var url = 'segment.idx';\n" +
"  req.open('get', url);\n" +
"  req.onload = function () {\n" +
"    console.log('req.status=' + req.status);\n" +
"    if (req.status == 200) {segment = parseInt(req.response); loadSegment();}\n" +
"  }\n" +
"  req.send();\n" +
"}\n" +
"function appendSegment(buf) {\n" +
"  console.log('appendSegment:buf=' + buf + ':segment=' + segment);\n" +
"  console.log('appendSegment:media.readyState=' + media.readyState);\n" +
"  buffer.appendBuffer(new Uint8Array(buf));\n" +
"  loaded++;\n" +
"}\n" +
"function loadMPD() {\n" +
"  console.log('loadMPD');\n" +
"  var req = new XMLHttpRequest();\n" +
"  var url = 'video.mpd';\n" +
"  req.open('get', url);\n" +
"  req.responseType = 'arraybuffer';\n" +
"  req.onload = function () {\n" +
"    console.log('req.status=' + req.status);\n" +
"    if (req.status == 200) {appendSegment(req.response);}\n" +
"    if (req.status == 404) {loadSegmentError(req.response);}\n" +
"  }\n" +
"  req.send();\n" +
"}\n" +
"function loadSegment() {\n" +
"  console.log('loadSegment:' + segment);\n" +
"  var req = new XMLHttpRequest();\n" +
"  var url = 'segment-' + segment + '." + selected_codec.codec + "';\n" +
"  req.open('get', url);\n" +
"  req.responseType = 'arraybuffer';\n" +
"  req.onload = function () {\n" +
"    console.log('req.status=' + req.status);\n" +
"    if (req.status == 200) {appendSegment(req.response);}\n" +
"    if (req.status == 404) {if (loaded == 0) return; getSegment();}\n" +
"  }\n" +
"  req.send();\n" +
"}\n" +
"function incrementSegment() {\n" +
"  console.log('incrementSegment');\n" +
"  if (loaded == 0) {loadSegment(); return;}\n" +
"  if (segment == 1) {getSegment(); return;}\n" +
"  segment = segment + 1;\n" +
"  loadSegment();\n" +
"}\n" +
"function sourceOpen() {\n" +
"  console.log('sourceOpen');\n" +
"  console.log('start segment=' + segment);\n" +
"  buffer = media.addSourceBuffer('" + selected_codec.mime + "');\n" +
"  buffer.mode = 'sequence';" +  //timestamps not used
"}\n" +
"function start() {\n" +
"  loadSegment();\n" +
"  setInterval(incrementSegment, " + segmentTimeMax + ");\n" +
"}\n" +
"</script>" +
"<video id=video width=100% height=100% controls onplay='start();'></video>" +
"<script>" +
"media = new MediaSource();\n" +
"video = document.getElementById('video');\n" +
"media.addEventListener('sourceopen', sourceOpen);\n" +
"video.src = URL.createObjectURL(media);\n" +
"</script>"
    );
    return html.toString();
  }

  private String getHTMLImage() {
    StringBuilder html = new StringBuilder();
    html.append(
"<script>" +
"var image;\n" +
"function assignImage(blob) {\n" +
"  var imageURL = URL.createObjectURL(blob);\n" +
"  image.src = imageURL;\n" +
"}\n" +
"function loadImage() {\n" +
"  console.log('loadImage');\n" +
"  var req = new XMLHttpRequest();\n" +
"  var url = 'image.jpg';\n" +
"  req.open('get', url);\n" +
"  req.responseType = 'blob';\n" +
"  req.onload = function () {\n" +
"    if (req.status == 200) {assignImage(req.response);}\n" +
"  }\n" +
"  req.send();\n" +
"}\n" +
"</script>" +
"<img id=image width=100% height=100%></img>" +
"<script>" +
"image = document.getElementById('image');\n" +
"setInterval(loadImage," + (timeLapseSecondsDelay * 1000) + ");\n" +
"</script>"
    );
    return html.toString();
  }
}
